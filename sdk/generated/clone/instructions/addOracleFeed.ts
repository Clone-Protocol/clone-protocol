/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'

/**
 * @category Instructions
 * @category AddOracleFeed
 * @category generated
 */
export type AddOracleFeedInstructionArgs = {
  pythAddress: web3.PublicKey
}
/**
 * @category Instructions
 * @category AddOracleFeed
 * @category generated
 */
export const addOracleFeedStruct = new beet.BeetArgsStruct<
  AddOracleFeedInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['pythAddress', beetSolana.publicKey],
  ],
  'AddOracleFeedInstructionArgs'
)
/**
 * Accounts required by the _addOracleFeed_ instruction
 *
 * @property [**signer**] admin
 * @property [] clone
 * @property [_writable_] tokenData
 * @category Instructions
 * @category AddOracleFeed
 * @category generated
 */
export type AddOracleFeedInstructionAccounts = {
  admin: web3.PublicKey
  clone: web3.PublicKey
  tokenData: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addOracleFeedInstructionDiscriminator = [
  14, 65, 33, 73, 114, 220, 190, 77,
]

/**
 * Creates a _AddOracleFeed_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddOracleFeed
 * @category generated
 */
export function createAddOracleFeedInstruction(
  accounts: AddOracleFeedInstructionAccounts,
  args: AddOracleFeedInstructionArgs,
  programId = new web3.PublicKey('F7KEvEhxAQ5AXKRSRHruSF55jcUxVv6S45ohkHvStd5v')
) {
  const [data] = addOracleFeedStruct.serialize({
    instructionDiscriminator: addOracleFeedInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.clone,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenData,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
