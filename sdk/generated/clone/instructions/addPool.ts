/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AddPool
 * @category generated
 */
export type AddPoolInstructionArgs = {
  minOvercollateralRatio: number
  maxLiquidationOvercollateralRatio: number
  liquidityTradingFeeBps: number
  treasuryTradingFeeBps: number
  ilHealthScoreCoefficient: number
  positionHealthScoreCoefficient: number
  oracleInfoIndex: number
}
/**
 * @category Instructions
 * @category AddPool
 * @category generated
 */
export const addPoolStruct = new beet.BeetArgsStruct<
  AddPoolInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['minOvercollateralRatio', beet.u16],
    ['maxLiquidationOvercollateralRatio', beet.u16],
    ['liquidityTradingFeeBps', beet.u16],
    ['treasuryTradingFeeBps', beet.u16],
    ['ilHealthScoreCoefficient', beet.u16],
    ['positionHealthScoreCoefficient', beet.u16],
    ['oracleInfoIndex', beet.u8],
  ],
  'AddPoolInstructionArgs'
)
/**
 * Accounts required by the _addPool_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [] clone
 * @property [_writable_] pools
 * @property [] onassetMint
 * @property [] onassetTokenAccount
 * @property [] underlyingAssetMint
 * @property [] underlyingAssetTokenAccount
 * @category Instructions
 * @category AddPool
 * @category generated
 */
export type AddPoolInstructionAccounts = {
  admin: web3.PublicKey
  clone: web3.PublicKey
  pools: web3.PublicKey
  onassetMint: web3.PublicKey
  onassetTokenAccount: web3.PublicKey
  underlyingAssetMint: web3.PublicKey
  underlyingAssetTokenAccount: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addPoolInstructionDiscriminator = [
  115, 230, 212, 211, 175, 49, 39, 169,
]

/**
 * Creates a _AddPool_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddPool
 * @category generated
 */
export function createAddPoolInstruction(
  accounts: AddPoolInstructionAccounts,
  args: AddPoolInstructionArgs,
  programId = new web3.PublicKey('C1onEW2kPetmHmwe74YC1ESx3LnFEpVau6g2pg4fHycr')
) {
  const [data] = addPoolStruct.serialize({
    instructionDiscriminator: addPoolInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.clone,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.pools,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.onassetMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.onassetTokenAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.underlyingAssetMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.underlyingAssetTokenAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
