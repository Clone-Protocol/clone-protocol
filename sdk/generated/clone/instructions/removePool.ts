/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RemovePool
 * @category generated
 */
export type RemovePoolInstructionArgs = {
  poolIndex: number
}
/**
 * @category Instructions
 * @category RemovePool
 * @category generated
 */
export const removePoolStruct = new beet.BeetArgsStruct<
  RemovePoolInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['poolIndex', beet.u8],
  ],
  'RemovePoolInstructionArgs'
)
/**
 * Accounts required by the _removePool_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [] clone
 * @property [_writable_] pools
 * @property [] underlyingAssetMint
 * @property [_writable_] underlyingAssetTokenAccount
 * @property [_writable_] treasuryAssetTokenAccount
 * @category Instructions
 * @category RemovePool
 * @category generated
 */
export type RemovePoolInstructionAccounts = {
  admin: web3.PublicKey
  clone: web3.PublicKey
  pools: web3.PublicKey
  underlyingAssetMint: web3.PublicKey
  underlyingAssetTokenAccount: web3.PublicKey
  treasuryAssetTokenAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const removePoolInstructionDiscriminator = [
  132, 42, 53, 138, 28, 220, 170, 55,
]

/**
 * Creates a _RemovePool_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RemovePool
 * @category generated
 */
export function createRemovePoolInstruction(
  accounts: RemovePoolInstructionAccounts,
  args: RemovePoolInstructionArgs,
  programId = new web3.PublicKey('C1onEW2kPetmHmwe74YC1ESx3LnFEpVau6g2pg4fHycr')
) {
  const [data] = removePoolStruct.serialize({
    instructionDiscriminator: removePoolInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.clone,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.pools,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.underlyingAssetMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.underlyingAssetTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryAssetTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
