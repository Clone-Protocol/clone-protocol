/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { MetadataArgs, metadataArgsBeet } from '../types/MetadataArgs'

/**
 * @category Instructions
 * @category CreateTokenMetadata
 * @category generated
 */
export type CreateTokenMetadataInstructionArgs = {
  metadataArgs: MetadataArgs
}
/**
 * @category Instructions
 * @category CreateTokenMetadata
 * @category generated
 */
export const createTokenMetadataStruct = new beet.FixableBeetArgsStruct<
  CreateTokenMetadataInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['metadataArgs', metadataArgsBeet],
  ],
  'CreateTokenMetadataInstructionArgs'
)
/**
 * Accounts required by the _createTokenMetadata_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [] clone
 * @property [] mint
 * @property [] metaplexProgram
 * @property [_writable_] metadata
 * @category Instructions
 * @category CreateTokenMetadata
 * @category generated
 */
export type CreateTokenMetadataInstructionAccounts = {
  admin: web3.PublicKey
  clone: web3.PublicKey
  mint: web3.PublicKey
  metaplexProgram: web3.PublicKey
  metadata: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createTokenMetadataInstructionDiscriminator = [
  221, 80, 176, 37, 153, 188, 160, 68,
]

/**
 * Creates a _CreateTokenMetadata_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateTokenMetadata
 * @category generated
 */
export function createCreateTokenMetadataInstruction(
  accounts: CreateTokenMetadataInstructionAccounts,
  args: CreateTokenMetadataInstructionArgs,
  programId = new web3.PublicKey('C1onEW2kPetmHmwe74YC1ESx3LnFEpVau6g2pg4fHycr')
) {
  const [data] = createTokenMetadataStruct.serialize({
    instructionDiscriminator: createTokenMetadataInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.clone,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.metaplexProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
