/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category WithdrawCollateralFromComet
 * @category generated
 */
export type WithdrawCollateralFromCometInstructionArgs = {
  collateralAmount: beet.bignum
}
/**
 * @category Instructions
 * @category WithdrawCollateralFromComet
 * @category generated
 */
export const withdrawCollateralFromCometStruct = new beet.BeetArgsStruct<
  WithdrawCollateralFromCometInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['collateralAmount', beet.u64],
  ],
  'WithdrawCollateralFromCometInstructionArgs'
)
/**
 * Accounts required by the _withdrawCollateralFromComet_ instruction
 *
 * @property [**signer**] user
 * @property [_writable_] userAccount
 * @property [_writable_] clone
 * @property [_writable_] pools
 * @property [_writable_] oracles
 * @property [_writable_] vault
 * @property [_writable_] userCollateralTokenAccount
 * @category Instructions
 * @category WithdrawCollateralFromComet
 * @category generated
 */
export type WithdrawCollateralFromCometInstructionAccounts = {
  user: web3.PublicKey
  userAccount: web3.PublicKey
  clone: web3.PublicKey
  pools: web3.PublicKey
  oracles: web3.PublicKey
  vault: web3.PublicKey
  userCollateralTokenAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const withdrawCollateralFromCometInstructionDiscriminator = [
  208, 162, 137, 187, 186, 161, 87, 136,
]

/**
 * Creates a _WithdrawCollateralFromComet_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category WithdrawCollateralFromComet
 * @category generated
 */
export function createWithdrawCollateralFromCometInstruction(
  accounts: WithdrawCollateralFromCometInstructionAccounts,
  args: WithdrawCollateralFromCometInstructionArgs,
  programId = new web3.PublicKey('C1onEW2kPetmHmwe74YC1ESx3LnFEpVau6g2pg4fHycr')
) {
  const [data] = withdrawCollateralFromCometStruct.serialize({
    instructionDiscriminator:
      withdrawCollateralFromCometInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.user,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.userAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.clone,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.pools,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.oracles,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userCollateralTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
