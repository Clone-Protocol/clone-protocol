/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { CloneParameters, cloneParametersBeet } from '../types/CloneParameters'

/**
 * @category Instructions
 * @category UpdateCloneParameters
 * @category generated
 */
export type UpdateCloneParametersInstructionArgs = {
  params: CloneParameters
}
/**
 * @category Instructions
 * @category UpdateCloneParameters
 * @category generated
 */
export const updateCloneParametersStruct = new beet.FixableBeetArgsStruct<
  UpdateCloneParametersInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['params', cloneParametersBeet],
  ],
  'UpdateCloneParametersInstructionArgs'
)
/**
 * Accounts required by the _updateCloneParameters_ instruction
 *
 * @property [**signer**] admin
 * @property [_writable_] clone
 * @property [_writable_] tokenData
 * @category Instructions
 * @category UpdateCloneParameters
 * @category generated
 */
export type UpdateCloneParametersInstructionAccounts = {
  admin: web3.PublicKey
  clone: web3.PublicKey
  tokenData: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateCloneParametersInstructionDiscriminator = [
  65, 102, 56, 210, 52, 197, 35, 30,
]

/**
 * Creates a _UpdateCloneParameters_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateCloneParameters
 * @category generated
 */
export function createUpdateCloneParametersInstruction(
  accounts: UpdateCloneParametersInstructionAccounts,
  args: UpdateCloneParametersInstructionArgs,
  programId = new web3.PublicKey('BxUeKSA62ME4uZZH5gJ3p3co47D8RiZzdLwZSyNgs4sJ')
) {
  const [data] = updateCloneParametersStruct.serialize({
    instructionDiscriminator: updateCloneParametersInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.clone,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenData,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
