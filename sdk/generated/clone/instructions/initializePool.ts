/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitializePool
 * @category generated
 */
export type InitializePoolInstructionArgs = {
  minOvercollateralRatio: number
  maxLiquidationOvercollateralRatio: number
  liquidityTradingFeeBps: number
  treasuryTradingFeeBps: number
  ilHealthScoreCoefficient: beet.bignum
  positionHealthScoreCoefficient: beet.bignum
  oracleInfoIndex: number
}
/**
 * @category Instructions
 * @category InitializePool
 * @category generated
 */
export const initializePoolStruct = new beet.BeetArgsStruct<
  InitializePoolInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['minOvercollateralRatio', beet.u16],
    ['maxLiquidationOvercollateralRatio', beet.u16],
    ['liquidityTradingFeeBps', beet.u16],
    ['treasuryTradingFeeBps', beet.u16],
    ['ilHealthScoreCoefficient', beet.u64],
    ['positionHealthScoreCoefficient', beet.u64],
    ['oracleInfoIndex', beet.u8],
  ],
  'InitializePoolInstructionArgs'
)
/**
 * Accounts required by the _initializePool_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [] clone
 * @property [_writable_] tokenData
 * @property [] onusdMint
 * @property [] onassetMint
 * @property [] onassetTokenAccount
 * @property [] underlyingAssetMint
 * @property [] underlyingAssetTokenAccount
 * @category Instructions
 * @category InitializePool
 * @category generated
 */
export type InitializePoolInstructionAccounts = {
  admin: web3.PublicKey
  clone: web3.PublicKey
  tokenData: web3.PublicKey
  onusdMint: web3.PublicKey
  onassetMint: web3.PublicKey
  onassetTokenAccount: web3.PublicKey
  underlyingAssetMint: web3.PublicKey
  underlyingAssetTokenAccount: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initializePoolInstructionDiscriminator = [
  95, 180, 10, 172, 84, 174, 232, 40,
]

/**
 * Creates a _InitializePool_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializePool
 * @category generated
 */
export function createInitializePoolInstruction(
  accounts: InitializePoolInstructionAccounts,
  args: InitializePoolInstructionArgs,
  programId = new web3.PublicKey('F7KEvEhxAQ5AXKRSRHruSF55jcUxVv6S45ohkHvStd5v')
) {
  const [data] = initializePoolStruct.serialize({
    instructionDiscriminator: initializePoolInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.clone,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.onusdMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.onassetMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.onassetTokenAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.underlyingAssetMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.underlyingAssetTokenAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
