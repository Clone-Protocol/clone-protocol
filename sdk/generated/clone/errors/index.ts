/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * Unauthorized: 'Unauthorized'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'Unauthorized'
  constructor() {
    super('Unauthorized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * InvalidMintCollateralRatio: 'Invalid Mint Collateral Ratio'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintCollateralRatioError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidMintCollateralRatio'
  constructor() {
    super('Invalid Mint Collateral Ratio')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintCollateralRatioError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1771,
  () => new InvalidMintCollateralRatioError()
)
createErrorFromNameLookup.set(
  'InvalidMintCollateralRatio',
  () => new InvalidMintCollateralRatioError()
)

/**
 * CollateralNotFound: 'Collateral Not Found'
 *
 * @category Errors
 * @category generated
 */
export class CollateralNotFoundError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'CollateralNotFound'
  constructor() {
    super('Collateral Not Found')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollateralNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new CollateralNotFoundError())
createErrorFromNameLookup.set(
  'CollateralNotFound',
  () => new CollateralNotFoundError()
)

/**
 * PoolNotFound: 'Pool Not Found'
 *
 * @category Errors
 * @category generated
 */
export class PoolNotFoundError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'PoolNotFound'
  constructor() {
    super('Pool Not Found')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PoolNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new PoolNotFoundError())
createErrorFromNameLookup.set('PoolNotFound', () => new PoolNotFoundError())

/**
 * InvalidCollateralType: 'Invalid Collateral Type'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCollateralTypeError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidCollateralType'
  constructor() {
    super('Invalid Collateral Type')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCollateralTypeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InvalidCollateralTypeError())
createErrorFromNameLookup.set(
  'InvalidCollateralType',
  () => new InvalidCollateralTypeError()
)

/**
 * InvalidTokenAmount: 'Invalid Token Amount'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenAmountError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidTokenAmount'
  constructor() {
    super('Invalid Token Amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InvalidTokenAmountError())
createErrorFromNameLookup.set(
  'InvalidTokenAmount',
  () => new InvalidTokenAmountError()
)

/**
 * InvalidBool: 'Invalid Bool'
 *
 * @category Errors
 * @category generated
 */
export class InvalidBoolError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidBool'
  constructor() {
    super('Invalid Bool')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidBoolError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidBoolError())
createErrorFromNameLookup.set('InvalidBool', () => new InvalidBoolError())

/**
 * OutdatedOracle: 'Outdated Oracle'
 *
 * @category Errors
 * @category generated
 */
export class OutdatedOracleError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'OutdatedOracle'
  constructor() {
    super('Outdated Oracle')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OutdatedOracleError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new OutdatedOracleError())
createErrorFromNameLookup.set('OutdatedOracle', () => new OutdatedOracleError())

/**
 * NonStablesNotSupported: 'Non-stables Not Supported'
 *
 * @category Errors
 * @category generated
 */
export class NonStablesNotSupportedError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'NonStablesNotSupported'
  constructor() {
    super('Non-stables Not Supported')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NonStablesNotSupportedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new NonStablesNotSupportedError())
createErrorFromNameLookup.set(
  'NonStablesNotSupported',
  () => new NonStablesNotSupportedError()
)

/**
 * BorrowPositionUnableToLiquidate: 'Mint Position Unable to Liquidate'
 *
 * @category Errors
 * @category generated
 */
export class BorrowPositionUnableToLiquidateError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'BorrowPositionUnableToLiquidate'
  constructor() {
    super('Mint Position Unable to Liquidate')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BorrowPositionUnableToLiquidateError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1779,
  () => new BorrowPositionUnableToLiquidateError()
)
createErrorFromNameLookup.set(
  'BorrowPositionUnableToLiquidate',
  () => new BorrowPositionUnableToLiquidateError()
)

/**
 * HealthScoreTooLow: 'Health Score Too Low'
 *
 * @category Errors
 * @category generated
 */
export class HealthScoreTooLowError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'HealthScoreTooLow'
  constructor() {
    super('Health Score Too Low')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, HealthScoreTooLowError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new HealthScoreTooLowError())
createErrorFromNameLookup.set(
  'HealthScoreTooLow',
  () => new HealthScoreTooLowError()
)

/**
 * InvalidInputCollateralAccount: 'Invalid input collateral account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidInputCollateralAccountError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'InvalidInputCollateralAccount'
  constructor() {
    super('Invalid input collateral account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidInputCollateralAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177b,
  () => new InvalidInputCollateralAccountError()
)
createErrorFromNameLookup.set(
  'InvalidInputCollateralAccount',
  () => new InvalidInputCollateralAccountError()
)

/**
 * InvalidAccountLoaderOwner: 'Invalid Account loader owner'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAccountLoaderOwnerError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'InvalidAccountLoaderOwner'
  constructor() {
    super('Invalid Account loader owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAccountLoaderOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177c,
  () => new InvalidAccountLoaderOwnerError()
)
createErrorFromNameLookup.set(
  'InvalidAccountLoaderOwner',
  () => new InvalidAccountLoaderOwnerError()
)

/**
 * InvalidInputPositionIndex: 'Invalid input position index'
 *
 * @category Errors
 * @category generated
 */
export class InvalidInputPositionIndexError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'InvalidInputPositionIndex'
  constructor() {
    super('Invalid input position index')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidInputPositionIndexError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177d,
  () => new InvalidInputPositionIndexError()
)
createErrorFromNameLookup.set(
  'InvalidInputPositionIndex',
  () => new InvalidInputPositionIndexError()
)

/**
 * InvalidTokenAccountBalance: 'Invalid token account balance'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenAccountBalanceError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'InvalidTokenAccountBalance'
  constructor() {
    super('Invalid token account balance')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenAccountBalanceError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177e,
  () => new InvalidTokenAccountBalanceError()
)
createErrorFromNameLookup.set(
  'InvalidTokenAccountBalance',
  () => new InvalidTokenAccountBalanceError()
)

/**
 * InequalityComparisonViolated: 'Inequality comparison violated'
 *
 * @category Errors
 * @category generated
 */
export class InequalityComparisonViolatedError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'InequalityComparisonViolated'
  constructor() {
    super('Inequality comparison violated')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InequalityComparisonViolatedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177f,
  () => new InequalityComparisonViolatedError()
)
createErrorFromNameLookup.set(
  'InequalityComparisonViolated',
  () => new InequalityComparisonViolatedError()
)

/**
 * CometNotEmpty: 'Comet Not Empty'
 *
 * @category Errors
 * @category generated
 */
export class CometNotEmptyError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'CometNotEmpty'
  constructor() {
    super('Comet Not Empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CometNotEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new CometNotEmptyError())
createErrorFromNameLookup.set('CometNotEmpty', () => new CometNotEmptyError())

/**
 * NotSubjectToLiquidation: 'Not Subject to Liquidation'
 *
 * @category Errors
 * @category generated
 */
export class NotSubjectToLiquidationError extends Error {
  readonly code: number = 0x1781
  readonly name: string = 'NotSubjectToLiquidation'
  constructor() {
    super('Not Subject to Liquidation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotSubjectToLiquidationError)
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new NotSubjectToLiquidationError())
createErrorFromNameLookup.set(
  'NotSubjectToLiquidation',
  () => new NotSubjectToLiquidationError()
)

/**
 * LiquidationAmountTooLarge: 'Liquidation amount too large'
 *
 * @category Errors
 * @category generated
 */
export class LiquidationAmountTooLargeError extends Error {
  readonly code: number = 0x1782
  readonly name: string = 'LiquidationAmountTooLarge'
  constructor() {
    super('Liquidation amount too large')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LiquidationAmountTooLargeError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1782,
  () => new LiquidationAmountTooLargeError()
)
createErrorFromNameLookup.set(
  'LiquidationAmountTooLarge',
  () => new LiquidationAmountTooLargeError()
)

/**
 * NoRemainingAccountsSupplied: 'No remaining accounts supplied'
 *
 * @category Errors
 * @category generated
 */
export class NoRemainingAccountsSuppliedError extends Error {
  readonly code: number = 0x1783
  readonly name: string = 'NoRemainingAccountsSupplied'
  constructor() {
    super('No remaining accounts supplied')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoRemainingAccountsSuppliedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1783,
  () => new NoRemainingAccountsSuppliedError()
)
createErrorFromNameLookup.set(
  'NoRemainingAccountsSupplied',
  () => new NoRemainingAccountsSuppliedError()
)

/**
 * NonZeroCollateralizationRatioRequired: 'Non-zero collateralization ratio required'
 *
 * @category Errors
 * @category generated
 */
export class NonZeroCollateralizationRatioRequiredError extends Error {
  readonly code: number = 0x1784
  readonly name: string = 'NonZeroCollateralizationRatioRequired'
  constructor() {
    super('Non-zero collateralization ratio required')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NonZeroCollateralizationRatioRequiredError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1784,
  () => new NonZeroCollateralizationRatioRequiredError()
)
createErrorFromNameLookup.set(
  'NonZeroCollateralizationRatioRequired',
  () => new NonZeroCollateralizationRatioRequiredError()
)

/**
 * IncorrectOracleAddress: 'Incorrect oracle address provided'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectOracleAddressError extends Error {
  readonly code: number = 0x1785
  readonly name: string = 'IncorrectOracleAddress'
  constructor() {
    super('Incorrect oracle address provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectOracleAddressError)
    }
  }
}

createErrorFromCodeLookup.set(0x1785, () => new IncorrectOracleAddressError())
createErrorFromNameLookup.set(
  'IncorrectOracleAddress',
  () => new IncorrectOracleAddressError()
)

/**
 * InvalidValueRange: 'Value is in an incorrect range'
 *
 * @category Errors
 * @category generated
 */
export class InvalidValueRangeError extends Error {
  readonly code: number = 0x1786
  readonly name: string = 'InvalidValueRange'
  constructor() {
    super('Value is in an incorrect range')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidValueRangeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1786, () => new InvalidValueRangeError())
createErrorFromNameLookup.set(
  'InvalidValueRange',
  () => new InvalidValueRangeError()
)

/**
 * InvalidAssetStability: 'Asset stable requirement violated'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAssetStabilityError extends Error {
  readonly code: number = 0x1787
  readonly name: string = 'InvalidAssetStability'
  constructor() {
    super('Asset stable requirement violated')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAssetStabilityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1787, () => new InvalidAssetStabilityError())
createErrorFromNameLookup.set(
  'InvalidAssetStability',
  () => new InvalidAssetStabilityError()
)

/**
 * SlippageToleranceExceeded: 'Slippage tolerance exceeded'
 *
 * @category Errors
 * @category generated
 */
export class SlippageToleranceExceededError extends Error {
  readonly code: number = 0x1788
  readonly name: string = 'SlippageToleranceExceeded'
  constructor() {
    super('Slippage tolerance exceeded')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SlippageToleranceExceededError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1788,
  () => new SlippageToleranceExceededError()
)
createErrorFromNameLookup.set(
  'SlippageToleranceExceeded',
  () => new SlippageToleranceExceededError()
)

/**
 * RequireOnlyonUSDCollateral: 'Collateral must be all in onUSD'
 *
 * @category Errors
 * @category generated
 */
export class RequireOnlyonUSDCollateralError extends Error {
  readonly code: number = 0x1789
  readonly name: string = 'RequireOnlyonUSDCollateral'
  constructor() {
    super('Collateral must be all in onUSD')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RequireOnlyonUSDCollateralError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1789,
  () => new RequireOnlyonUSDCollateralError()
)
createErrorFromNameLookup.set(
  'RequireOnlyonUSDCollateral',
  () => new RequireOnlyonUSDCollateralError()
)

/**
 * RequireAllPositionsClosed: 'Positions must be all closed'
 *
 * @category Errors
 * @category generated
 */
export class RequireAllPositionsClosedError extends Error {
  readonly code: number = 0x178a
  readonly name: string = 'RequireAllPositionsClosed'
  constructor() {
    super('Positions must be all closed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RequireAllPositionsClosedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178a,
  () => new RequireAllPositionsClosedError()
)
createErrorFromNameLookup.set(
  'RequireAllPositionsClosed',
  () => new RequireAllPositionsClosedError()
)

/**
 * FailedToLoadPyth: 'Failed to Load Pyth Price Feed'
 *
 * @category Errors
 * @category generated
 */
export class FailedToLoadPythError extends Error {
  readonly code: number = 0x178b
  readonly name: string = 'FailedToLoadPyth'
  constructor() {
    super('Failed to Load Pyth Price Feed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FailedToLoadPythError)
    }
  }
}

createErrorFromCodeLookup.set(0x178b, () => new FailedToLoadPythError())
createErrorFromNameLookup.set(
  'FailedToLoadPyth',
  () => new FailedToLoadPythError()
)

/**
 * StatusPreventsAction: 'Status Prevents Action'
 *
 * @category Errors
 * @category generated
 */
export class StatusPreventsActionError extends Error {
  readonly code: number = 0x178c
  readonly name: string = 'StatusPreventsAction'
  constructor() {
    super('Status Prevents Action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StatusPreventsActionError)
    }
  }
}

createErrorFromCodeLookup.set(0x178c, () => new StatusPreventsActionError())
createErrorFromNameLookup.set(
  'StatusPreventsAction',
  () => new StatusPreventsActionError()
)

/**
 * PoolEmpty: 'Pool is empty'
 *
 * @category Errors
 * @category generated
 */
export class PoolEmptyError extends Error {
  readonly code: number = 0x178d
  readonly name: string = 'PoolEmpty'
  constructor() {
    super('Pool is empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PoolEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x178d, () => new PoolEmptyError())
createErrorFromNameLookup.set('PoolEmpty', () => new PoolEmptyError())

/**
 * NoLiquidityToWithdraw: 'No liquidity to withdraw'
 *
 * @category Errors
 * @category generated
 */
export class NoLiquidityToWithdrawError extends Error {
  readonly code: number = 0x178e
  readonly name: string = 'NoLiquidityToWithdraw'
  constructor() {
    super('No liquidity to withdraw')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoLiquidityToWithdrawError)
    }
  }
}

createErrorFromCodeLookup.set(0x178e, () => new NoLiquidityToWithdrawError())
createErrorFromNameLookup.set(
  'NoLiquidityToWithdraw',
  () => new NoLiquidityToWithdrawError()
)

/**
 * InvalidStatus: 'Invalid Status'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStatusError extends Error {
  readonly code: number = 0x178f
  readonly name: string = 'InvalidStatus'
  constructor() {
    super('Invalid Status')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStatusError)
    }
  }
}

createErrorFromCodeLookup.set(0x178f, () => new InvalidStatusError())
createErrorFromNameLookup.set('InvalidStatus', () => new InvalidStatusError())

/**
 * AuthArrayFull: 'Auth Array Full'
 *
 * @category Errors
 * @category generated
 */
export class AuthArrayFullError extends Error {
  readonly code: number = 0x1790
  readonly name: string = 'AuthArrayFull'
  constructor() {
    super('Auth Array Full')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AuthArrayFullError)
    }
  }
}

createErrorFromCodeLookup.set(0x1790, () => new AuthArrayFullError())
createErrorFromNameLookup.set('AuthArrayFull', () => new AuthArrayFullError())

/**
 * AuthNotFound: 'Auth Not Found'
 *
 * @category Errors
 * @category generated
 */
export class AuthNotFoundError extends Error {
  readonly code: number = 0x1791
  readonly name: string = 'AuthNotFound'
  constructor() {
    super('Auth Not Found')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AuthNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x1791, () => new AuthNotFoundError())
createErrorFromNameLookup.set('AuthNotFound', () => new AuthNotFoundError())

/**
 * InvalidOracleIndex: 'Invalid oracle index'
 *
 * @category Errors
 * @category generated
 */
export class InvalidOracleIndexError extends Error {
  readonly code: number = 0x1792
  readonly name: string = 'InvalidOracleIndex'
  constructor() {
    super('Invalid oracle index')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidOracleIndexError)
    }
  }
}

createErrorFromCodeLookup.set(0x1792, () => new InvalidOracleIndexError())
createErrorFromNameLookup.set(
  'InvalidOracleIndex',
  () => new InvalidOracleIndexError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
