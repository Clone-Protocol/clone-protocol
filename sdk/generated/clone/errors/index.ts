/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidMintCollateralRatio: 'Invalid Mint Collateral Ratio'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintCollateralRatioError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidMintCollateralRatio'
  constructor() {
    super('Invalid Mint Collateral Ratio')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintCollateralRatioError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1770,
  () => new InvalidMintCollateralRatioError()
)
createErrorFromNameLookup.set(
  'InvalidMintCollateralRatio',
  () => new InvalidMintCollateralRatioError()
)

/**
 * InvalidCometCollateralRatio: 'Invalid Comet Collateral Ratio'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCometCollateralRatioError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidCometCollateralRatio'
  constructor() {
    super('Invalid Comet Collateral Ratio')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCometCollateralRatioError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1771,
  () => new InvalidCometCollateralRatioError()
)
createErrorFromNameLookup.set(
  'InvalidCometCollateralRatio',
  () => new InvalidCometCollateralRatioError()
)

/**
 * DifferentScale: 'Different Scale'
 *
 * @category Errors
 * @category generated
 */
export class DifferentScaleError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'DifferentScale'
  constructor() {
    super('Different Scale')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DifferentScaleError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new DifferentScaleError())
createErrorFromNameLookup.set('DifferentScale', () => new DifferentScaleError())

/**
 * MathError: 'Math Error'
 *
 * @category Errors
 * @category generated
 */
export class MathErrorError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'MathError'
  constructor() {
    super('Math Error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MathErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new MathErrorError())
createErrorFromNameLookup.set('MathError', () => new MathErrorError())

/**
 * OracleConfidenceOutOfRange: 'Oracle Confidence Out Of Range'
 *
 * @category Errors
 * @category generated
 */
export class OracleConfidenceOutOfRangeError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'OracleConfidenceOutOfRange'
  constructor() {
    super('Oracle Confidence Out Of Range')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OracleConfidenceOutOfRangeError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1774,
  () => new OracleConfidenceOutOfRangeError()
)
createErrorFromNameLookup.set(
  'OracleConfidenceOutOfRange',
  () => new OracleConfidenceOutOfRangeError()
)

/**
 * AssetInfoNotFound: 'Asset Info Not Found'
 *
 * @category Errors
 * @category generated
 */
export class AssetInfoNotFoundError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'AssetInfoNotFound'
  constructor() {
    super('Asset Info Not Found')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AssetInfoNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new AssetInfoNotFoundError())
createErrorFromNameLookup.set(
  'AssetInfoNotFound',
  () => new AssetInfoNotFoundError()
)

/**
 * CollateralNotFound: 'Collateral Not Found'
 *
 * @category Errors
 * @category generated
 */
export class CollateralNotFoundError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'CollateralNotFound'
  constructor() {
    super('Collateral Not Found')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollateralNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new CollateralNotFoundError())
createErrorFromNameLookup.set(
  'CollateralNotFound',
  () => new CollateralNotFoundError()
)

/**
 * PoolNotFound: 'Pool Not Found'
 *
 * @category Errors
 * @category generated
 */
export class PoolNotFoundError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'PoolNotFound'
  constructor() {
    super('Pool Not Found')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PoolNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new PoolNotFoundError())
createErrorFromNameLookup.set('PoolNotFound', () => new PoolNotFoundError())

/**
 * InvalidCollateralType: 'Invalid Collateral Type'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCollateralTypeError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidCollateralType'
  constructor() {
    super('Invalid Collateral Type')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCollateralTypeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidCollateralTypeError())
createErrorFromNameLookup.set(
  'InvalidCollateralType',
  () => new InvalidCollateralTypeError()
)

/**
 * InvalidTokenAmount: 'Invalid Token Amount'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenAmountError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'InvalidTokenAmount'
  constructor() {
    super('Invalid Token Amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new InvalidTokenAmountError())
createErrorFromNameLookup.set(
  'InvalidTokenAmount',
  () => new InvalidTokenAmountError()
)

/**
 * InvalidBool: 'Invalid Bool'
 *
 * @category Errors
 * @category generated
 */
export class InvalidBoolError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidBool'
  constructor() {
    super('Invalid Bool')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidBoolError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidBoolError())
createErrorFromNameLookup.set('InvalidBool', () => new InvalidBoolError())

/**
 * InsufficientCollateral: 'Insufficient Collateral'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientCollateralError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'InsufficientCollateral'
  constructor() {
    super('Insufficient Collateral')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientCollateralError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new InsufficientCollateralError())
createErrorFromNameLookup.set(
  'InsufficientCollateral',
  () => new InsufficientCollateralError()
)

/**
 * NoPriceDeviationDetected: 'No Price Deviation Detected'
 *
 * @category Errors
 * @category generated
 */
export class NoPriceDeviationDetectedError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'NoPriceDeviationDetected'
  constructor() {
    super('No Price Deviation Detected')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoPriceDeviationDetectedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new NoPriceDeviationDetectedError())
createErrorFromNameLookup.set(
  'NoPriceDeviationDetected',
  () => new NoPriceDeviationDetectedError()
)

/**
 * OutdatedOracle: 'Outdated Oracle'
 *
 * @category Errors
 * @category generated
 */
export class OutdatedOracleError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'OutdatedOracle'
  constructor() {
    super('Outdated Oracle')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OutdatedOracleError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new OutdatedOracleError())
createErrorFromNameLookup.set('OutdatedOracle', () => new OutdatedOracleError())

/**
 * CometAlreadyLiquidated: 'Comet Already Liquidated'
 *
 * @category Errors
 * @category generated
 */
export class CometAlreadyLiquidatedError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'CometAlreadyLiquidated'
  constructor() {
    super('Comet Already Liquidated')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CometAlreadyLiquidatedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new CometAlreadyLiquidatedError())
createErrorFromNameLookup.set(
  'CometAlreadyLiquidated',
  () => new CometAlreadyLiquidatedError()
)

/**
 * CometNotYetLiquidated: 'Comet Not Yet Liquidated'
 *
 * @category Errors
 * @category generated
 */
export class CometNotYetLiquidatedError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'CometNotYetLiquidated'
  constructor() {
    super('Comet Not Yet Liquidated')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CometNotYetLiquidatedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new CometNotYetLiquidatedError())
createErrorFromNameLookup.set(
  'CometNotYetLiquidated',
  () => new CometNotYetLiquidatedError()
)

/**
 * CometUnableToLiquidate: 'Comet Unable to Liquidate'
 *
 * @category Errors
 * @category generated
 */
export class CometUnableToLiquidateError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'CometUnableToLiquidate'
  constructor() {
    super('Comet Unable to Liquidate')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CometUnableToLiquidateError)
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new CometUnableToLiquidateError())
createErrorFromNameLookup.set(
  'CometUnableToLiquidate',
  () => new CometUnableToLiquidateError()
)

/**
 * NonStablesNotSupported: 'Non-stables Not Supported'
 *
 * @category Errors
 * @category generated
 */
export class NonStablesNotSupportedError extends Error {
  readonly code: number = 0x1781
  readonly name: string = 'NonStablesNotSupported'
  constructor() {
    super('Non-stables Not Supported')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NonStablesNotSupportedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new NonStablesNotSupportedError())
createErrorFromNameLookup.set(
  'NonStablesNotSupported',
  () => new NonStablesNotSupportedError()
)

/**
 * MintPositionUnableToLiquidate: 'Mint Position Unable to Liquidate'
 *
 * @category Errors
 * @category generated
 */
export class MintPositionUnableToLiquidateError extends Error {
  readonly code: number = 0x1782
  readonly name: string = 'MintPositionUnableToLiquidate'
  constructor() {
    super('Mint Position Unable to Liquidate')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintPositionUnableToLiquidateError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1782,
  () => new MintPositionUnableToLiquidateError()
)
createErrorFromNameLookup.set(
  'MintPositionUnableToLiquidate',
  () => new MintPositionUnableToLiquidateError()
)

/**
 * NoSuchCollateralPosition: 'No Such Collateral Position'
 *
 * @category Errors
 * @category generated
 */
export class NoSuchCollateralPositionError extends Error {
  readonly code: number = 0x1783
  readonly name: string = 'NoSuchCollateralPosition'
  constructor() {
    super('No Such Collateral Position')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoSuchCollateralPositionError)
    }
  }
}

createErrorFromCodeLookup.set(0x1783, () => new NoSuchCollateralPositionError())
createErrorFromNameLookup.set(
  'NoSuchCollateralPosition',
  () => new NoSuchCollateralPositionError()
)

/**
 * InvalidHealthScoreCoefficient: 'Invalid Health Score Coefficient'
 *
 * @category Errors
 * @category generated
 */
export class InvalidHealthScoreCoefficientError extends Error {
  readonly code: number = 0x1784
  readonly name: string = 'InvalidHealthScoreCoefficient'
  constructor() {
    super('Invalid Health Score Coefficient')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidHealthScoreCoefficientError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1784,
  () => new InvalidHealthScoreCoefficientError()
)
createErrorFromNameLookup.set(
  'InvalidHealthScoreCoefficient',
  () => new InvalidHealthScoreCoefficientError()
)

/**
 * FailedImpermanentLossCalculation: 'Failed Impermanent Loss Calculation'
 *
 * @category Errors
 * @category generated
 */
export class FailedImpermanentLossCalculationError extends Error {
  readonly code: number = 0x1785
  readonly name: string = 'FailedImpermanentLossCalculation'
  constructor() {
    super('Failed Impermanent Loss Calculation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FailedImpermanentLossCalculationError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1785,
  () => new FailedImpermanentLossCalculationError()
)
createErrorFromNameLookup.set(
  'FailedImpermanentLossCalculation',
  () => new FailedImpermanentLossCalculationError()
)

/**
 * HealthScoreTooLow: 'Health Score Too Low'
 *
 * @category Errors
 * @category generated
 */
export class HealthScoreTooLowError extends Error {
  readonly code: number = 0x1786
  readonly name: string = 'HealthScoreTooLow'
  constructor() {
    super('Health Score Too Low')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, HealthScoreTooLowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1786, () => new HealthScoreTooLowError())
createErrorFromNameLookup.set(
  'HealthScoreTooLow',
  () => new HealthScoreTooLowError()
)

/**
 * InsufficientonUSDCollateral: 'Insufficient onUSD Collateral'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientonUSDCollateralError extends Error {
  readonly code: number = 0x1787
  readonly name: string = 'InsufficientonUSDCollateral'
  constructor() {
    super('Insufficient onUSD Collateral')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientonUSDCollateralError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1787,
  () => new InsufficientonUSDCollateralError()
)
createErrorFromNameLookup.set(
  'InsufficientonUSDCollateral',
  () => new InsufficientonUSDCollateralError()
)

/**
 * AttemptedToAddNewPoolToSingleComet: 'Attempted To Add New Pool To Single Comet'
 *
 * @category Errors
 * @category generated
 */
export class AttemptedToAddNewPoolToSingleCometError extends Error {
  readonly code: number = 0x1788
  readonly name: string = 'AttemptedToAddNewPoolToSingleComet'
  constructor() {
    super('Attempted To Add New Pool To Single Comet')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AttemptedToAddNewPoolToSingleCometError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1788,
  () => new AttemptedToAddNewPoolToSingleCometError()
)
createErrorFromNameLookup.set(
  'AttemptedToAddNewPoolToSingleComet',
  () => new AttemptedToAddNewPoolToSingleCometError()
)

/**
 * AttemptedToAddNewCollateralToSingleComet: 'Attempted To Add New Collateral To Single Comet'
 *
 * @category Errors
 * @category generated
 */
export class AttemptedToAddNewCollateralToSingleCometError extends Error {
  readonly code: number = 0x1789
  readonly name: string = 'AttemptedToAddNewCollateralToSingleComet'
  constructor() {
    super('Attempted To Add New Collateral To Single Comet')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        AttemptedToAddNewCollateralToSingleCometError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x1789,
  () => new AttemptedToAddNewCollateralToSingleCometError()
)
createErrorFromNameLookup.set(
  'AttemptedToAddNewCollateralToSingleComet',
  () => new AttemptedToAddNewCollateralToSingleCometError()
)

/**
 * InvalidInputMintAccount: 'Invalid input mint account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidInputMintAccountError extends Error {
  readonly code: number = 0x178a
  readonly name: string = 'InvalidInputMintAccount'
  constructor() {
    super('Invalid input mint account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidInputMintAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x178a, () => new InvalidInputMintAccountError())
createErrorFromNameLookup.set(
  'InvalidInputMintAccount',
  () => new InvalidInputMintAccountError()
)

/**
 * InvalidInputCollateralAccount: 'Invalid input collateral account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidInputCollateralAccountError extends Error {
  readonly code: number = 0x178b
  readonly name: string = 'InvalidInputCollateralAccount'
  constructor() {
    super('Invalid input collateral account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidInputCollateralAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178b,
  () => new InvalidInputCollateralAccountError()
)
createErrorFromNameLookup.set(
  'InvalidInputCollateralAccount',
  () => new InvalidInputCollateralAccountError()
)

/**
 * InvalidAccountLoaderOwner: 'Invalid Account loader owner'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAccountLoaderOwnerError extends Error {
  readonly code: number = 0x178c
  readonly name: string = 'InvalidAccountLoaderOwner'
  constructor() {
    super('Invalid Account loader owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAccountLoaderOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178c,
  () => new InvalidAccountLoaderOwnerError()
)
createErrorFromNameLookup.set(
  'InvalidAccountLoaderOwner',
  () => new InvalidAccountLoaderOwnerError()
)

/**
 * InvalidInputPositionIndex: 'Invalid input position index'
 *
 * @category Errors
 * @category generated
 */
export class InvalidInputPositionIndexError extends Error {
  readonly code: number = 0x178d
  readonly name: string = 'InvalidInputPositionIndex'
  constructor() {
    super('Invalid input position index')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidInputPositionIndexError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178d,
  () => new InvalidInputPositionIndexError()
)
createErrorFromNameLookup.set(
  'InvalidInputPositionIndex',
  () => new InvalidInputPositionIndexError()
)

/**
 * InvalidTokenAccountBalance: 'Invalid token account balance'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenAccountBalanceError extends Error {
  readonly code: number = 0x178e
  readonly name: string = 'InvalidTokenAccountBalance'
  constructor() {
    super('Invalid token account balance')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenAccountBalanceError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178e,
  () => new InvalidTokenAccountBalanceError()
)
createErrorFromNameLookup.set(
  'InvalidTokenAccountBalance',
  () => new InvalidTokenAccountBalanceError()
)

/**
 * InequalityComparisonViolated: 'Inequality comparison violated'
 *
 * @category Errors
 * @category generated
 */
export class InequalityComparisonViolatedError extends Error {
  readonly code: number = 0x178f
  readonly name: string = 'InequalityComparisonViolated'
  constructor() {
    super('Inequality comparison violated')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InequalityComparisonViolatedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178f,
  () => new InequalityComparisonViolatedError()
)
createErrorFromNameLookup.set(
  'InequalityComparisonViolated',
  () => new InequalityComparisonViolatedError()
)

/**
 * WrongCometType: 'Wrong Comet Type'
 *
 * @category Errors
 * @category generated
 */
export class WrongCometTypeError extends Error {
  readonly code: number = 0x1790
  readonly name: string = 'WrongCometType'
  constructor() {
    super('Wrong Comet Type')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongCometTypeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1790, () => new WrongCometTypeError())
createErrorFromNameLookup.set('WrongCometType', () => new WrongCometTypeError())

/**
 * CometNotEmpty: 'Comet Not Empty'
 *
 * @category Errors
 * @category generated
 */
export class CometNotEmptyError extends Error {
  readonly code: number = 0x1791
  readonly name: string = 'CometNotEmpty'
  constructor() {
    super('Comet Not Empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CometNotEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1791, () => new CometNotEmptyError())
createErrorFromNameLookup.set('CometNotEmpty', () => new CometNotEmptyError())

/**
 * LiquidityNotWithdrawn: 'Liquidity Not Withdrawn'
 *
 * @category Errors
 * @category generated
 */
export class LiquidityNotWithdrawnError extends Error {
  readonly code: number = 0x1792
  readonly name: string = 'LiquidityNotWithdrawn'
  constructor() {
    super('Liquidity Not Withdrawn')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LiquidityNotWithdrawnError)
    }
  }
}

createErrorFromCodeLookup.set(0x1792, () => new LiquidityNotWithdrawnError())
createErrorFromNameLookup.set(
  'LiquidityNotWithdrawn',
  () => new LiquidityNotWithdrawnError()
)

/**
 * NotSubjectToLiquidation: 'Not Subject to Liquidation'
 *
 * @category Errors
 * @category generated
 */
export class NotSubjectToLiquidationError extends Error {
  readonly code: number = 0x1793
  readonly name: string = 'NotSubjectToLiquidation'
  constructor() {
    super('Not Subject to Liquidation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotSubjectToLiquidationError)
    }
  }
}

createErrorFromCodeLookup.set(0x1793, () => new NotSubjectToLiquidationError())
createErrorFromNameLookup.set(
  'NotSubjectToLiquidation',
  () => new NotSubjectToLiquidationError()
)

/**
 * NotSubjectToILLiquidation: 'Not Subject to IL liquidation'
 *
 * @category Errors
 * @category generated
 */
export class NotSubjectToILLiquidationError extends Error {
  readonly code: number = 0x1794
  readonly name: string = 'NotSubjectToILLiquidation'
  constructor() {
    super('Not Subject to IL liquidation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotSubjectToILLiquidationError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1794,
  () => new NotSubjectToILLiquidationError()
)
createErrorFromNameLookup.set(
  'NotSubjectToILLiquidation',
  () => new NotSubjectToILLiquidationError()
)

/**
 * LiquidationAmountTooLarge: 'Liquidation amount too large'
 *
 * @category Errors
 * @category generated
 */
export class LiquidationAmountTooLargeError extends Error {
  readonly code: number = 0x1795
  readonly name: string = 'LiquidationAmountTooLarge'
  constructor() {
    super('Liquidation amount too large')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LiquidationAmountTooLargeError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1795,
  () => new LiquidationAmountTooLargeError()
)
createErrorFromNameLookup.set(
  'LiquidationAmountTooLarge',
  () => new LiquidationAmountTooLargeError()
)

/**
 * NoRemainingAccountsSupplied: 'No remaining accounts supplied'
 *
 * @category Errors
 * @category generated
 */
export class NoRemainingAccountsSuppliedError extends Error {
  readonly code: number = 0x1796
  readonly name: string = 'NoRemainingAccountsSupplied'
  constructor() {
    super('No remaining accounts supplied')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoRemainingAccountsSuppliedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1796,
  () => new NoRemainingAccountsSuppliedError()
)
createErrorFromNameLookup.set(
  'NoRemainingAccountsSupplied',
  () => new NoRemainingAccountsSuppliedError()
)

/**
 * InvalidRecenter: 'Invalid Recenter'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRecenterError extends Error {
  readonly code: number = 0x1797
  readonly name: string = 'InvalidRecenter'
  constructor() {
    super('Invalid Recenter')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRecenterError)
    }
  }
}

createErrorFromCodeLookup.set(0x1797, () => new InvalidRecenterError())
createErrorFromNameLookup.set(
  'InvalidRecenter',
  () => new InvalidRecenterError()
)

/**
 * NonZeroCollateralizationRatioRequired: 'Non-zero collateralization ratio required'
 *
 * @category Errors
 * @category generated
 */
export class NonZeroCollateralizationRatioRequiredError extends Error {
  readonly code: number = 0x1798
  readonly name: string = 'NonZeroCollateralizationRatioRequired'
  constructor() {
    super('Non-zero collateralization ratio required')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NonZeroCollateralizationRatioRequiredError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1798,
  () => new NonZeroCollateralizationRatioRequiredError()
)
createErrorFromNameLookup.set(
  'NonZeroCollateralizationRatioRequired',
  () => new NonZeroCollateralizationRatioRequiredError()
)

/**
 * IncorrectOracleAddress: 'Incorrect oracle address provided'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectOracleAddressError extends Error {
  readonly code: number = 0x1799
  readonly name: string = 'IncorrectOracleAddress'
  constructor() {
    super('Incorrect oracle address provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectOracleAddressError)
    }
  }
}

createErrorFromCodeLookup.set(0x1799, () => new IncorrectOracleAddressError())
createErrorFromNameLookup.set(
  'IncorrectOracleAddress',
  () => new IncorrectOracleAddressError()
)

/**
 * CenteredCometRequired: 'Comet must be centered'
 *
 * @category Errors
 * @category generated
 */
export class CenteredCometRequiredError extends Error {
  readonly code: number = 0x179a
  readonly name: string = 'CenteredCometRequired'
  constructor() {
    super('Comet must be centered')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CenteredCometRequiredError)
    }
  }
}

createErrorFromCodeLookup.set(0x179a, () => new CenteredCometRequiredError())
createErrorFromNameLookup.set(
  'CenteredCometRequired',
  () => new CenteredCometRequiredError()
)

/**
 * InvalidResultingComet: 'Comet is in an invalid state after action'
 *
 * @category Errors
 * @category generated
 */
export class InvalidResultingCometError extends Error {
  readonly code: number = 0x179b
  readonly name: string = 'InvalidResultingComet'
  constructor() {
    super('Comet is in an invalid state after action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidResultingCometError)
    }
  }
}

createErrorFromCodeLookup.set(0x179b, () => new InvalidResultingCometError())
createErrorFromNameLookup.set(
  'InvalidResultingComet',
  () => new InvalidResultingCometError()
)

/**
 * InvalidValueRange: 'Value is in an incorrect range'
 *
 * @category Errors
 * @category generated
 */
export class InvalidValueRangeError extends Error {
  readonly code: number = 0x179c
  readonly name: string = 'InvalidValueRange'
  constructor() {
    super('Value is in an incorrect range')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidValueRangeError)
    }
  }
}

createErrorFromCodeLookup.set(0x179c, () => new InvalidValueRangeError())
createErrorFromNameLookup.set(
  'InvalidValueRange',
  () => new InvalidValueRangeError()
)

/**
 * InvalidAssetStability: 'Asset stable requirement violated'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAssetStabilityError extends Error {
  readonly code: number = 0x179d
  readonly name: string = 'InvalidAssetStability'
  constructor() {
    super('Asset stable requirement violated')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAssetStabilityError)
    }
  }
}

createErrorFromCodeLookup.set(0x179d, () => new InvalidAssetStabilityError())
createErrorFromNameLookup.set(
  'InvalidAssetStability',
  () => new InvalidAssetStabilityError()
)

/**
 * SlippageToleranceExceeded: 'Slippage tolerance exceeded'
 *
 * @category Errors
 * @category generated
 */
export class SlippageToleranceExceededError extends Error {
  readonly code: number = 0x179e
  readonly name: string = 'SlippageToleranceExceeded'
  constructor() {
    super('Slippage tolerance exceeded')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SlippageToleranceExceededError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x179e,
  () => new SlippageToleranceExceededError()
)
createErrorFromNameLookup.set(
  'SlippageToleranceExceeded',
  () => new SlippageToleranceExceededError()
)

/**
 * PositionMustBeEmpty: 'Position must be empty'
 *
 * @category Errors
 * @category generated
 */
export class PositionMustBeEmptyError extends Error {
  readonly code: number = 0x179f
  readonly name: string = 'PositionMustBeEmpty'
  constructor() {
    super('Position must be empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PositionMustBeEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x179f, () => new PositionMustBeEmptyError())
createErrorFromNameLookup.set(
  'PositionMustBeEmpty',
  () => new PositionMustBeEmptyError()
)

/**
 * RequireOnlyonUSDCollateral: 'Collateral must be all in onUSD'
 *
 * @category Errors
 * @category generated
 */
export class RequireOnlyonUSDCollateralError extends Error {
  readonly code: number = 0x17a0
  readonly name: string = 'RequireOnlyonUSDCollateral'
  constructor() {
    super('Collateral must be all in onUSD')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RequireOnlyonUSDCollateralError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a0,
  () => new RequireOnlyonUSDCollateralError()
)
createErrorFromNameLookup.set(
  'RequireOnlyonUSDCollateral',
  () => new RequireOnlyonUSDCollateralError()
)

/**
 * RequireLargestILDPositionFirst: 'Require largest ILD position first'
 *
 * @category Errors
 * @category generated
 */
export class RequireLargestILDPositionFirstError extends Error {
  readonly code: number = 0x17a1
  readonly name: string = 'RequireLargestILDPositionFirst'
  constructor() {
    super('Require largest ILD position first')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RequireLargestILDPositionFirstError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a1,
  () => new RequireLargestILDPositionFirstError()
)
createErrorFromNameLookup.set(
  'RequireLargestILDPositionFirst',
  () => new RequireLargestILDPositionFirstError()
)

/**
 * RequireAllPositionsClosed: 'Positions must be all closed'
 *
 * @category Errors
 * @category generated
 */
export class RequireAllPositionsClosedError extends Error {
  readonly code: number = 0x17a2
  readonly name: string = 'RequireAllPositionsClosed'
  constructor() {
    super('Positions must be all closed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RequireAllPositionsClosedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a2,
  () => new RequireAllPositionsClosedError()
)
createErrorFromNameLookup.set(
  'RequireAllPositionsClosed',
  () => new RequireAllPositionsClosedError()
)

/**
 * MaxPoolOwnershipExceeded: 'Pool ownership exceeding max limit'
 *
 * @category Errors
 * @category generated
 */
export class MaxPoolOwnershipExceededError extends Error {
  readonly code: number = 0x17a3
  readonly name: string = 'MaxPoolOwnershipExceeded'
  constructor() {
    super('Pool ownership exceeding max limit')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MaxPoolOwnershipExceededError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a3, () => new MaxPoolOwnershipExceededError())
createErrorFromNameLookup.set(
  'MaxPoolOwnershipExceeded',
  () => new MaxPoolOwnershipExceededError()
)

/**
 * FailedToLoadPyth: 'Failed to Load Pyth Price Feed'
 *
 * @category Errors
 * @category generated
 */
export class FailedToLoadPythError extends Error {
  readonly code: number = 0x17a4
  readonly name: string = 'FailedToLoadPyth'
  constructor() {
    super('Failed to Load Pyth Price Feed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FailedToLoadPythError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a4, () => new FailedToLoadPythError())
createErrorFromNameLookup.set(
  'FailedToLoadPyth',
  () => new FailedToLoadPythError()
)

/**
 * PoolDeprecated: 'Pool Deprecated'
 *
 * @category Errors
 * @category generated
 */
export class PoolDeprecatedError extends Error {
  readonly code: number = 0x17a5
  readonly name: string = 'PoolDeprecated'
  constructor() {
    super('Pool Deprecated')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PoolDeprecatedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a5, () => new PoolDeprecatedError())
createErrorFromNameLookup.set('PoolDeprecated', () => new PoolDeprecatedError())

/**
 * PoolEmpty: 'Pool is empty'
 *
 * @category Errors
 * @category generated
 */
export class PoolEmptyError extends Error {
  readonly code: number = 0x17a6
  readonly name: string = 'PoolEmpty'
  constructor() {
    super('Pool is empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PoolEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a6, () => new PoolEmptyError())
createErrorFromNameLookup.set('PoolEmpty', () => new PoolEmptyError())

/**
 * NoLiquidityToWithdraw: 'No liquidity to withdraw'
 *
 * @category Errors
 * @category generated
 */
export class NoLiquidityToWithdrawError extends Error {
  readonly code: number = 0x17a7
  readonly name: string = 'NoLiquidityToWithdraw'
  constructor() {
    super('No liquidity to withdraw')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoLiquidityToWithdrawError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a7, () => new NoLiquidityToWithdrawError())
createErrorFromNameLookup.set(
  'NoLiquidityToWithdraw',
  () => new NoLiquidityToWithdrawError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
