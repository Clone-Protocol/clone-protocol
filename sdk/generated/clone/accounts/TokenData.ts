/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { Pool, poolBeet } from '../types/Pool'
import { Collateral, collateralBeet } from '../types/Collateral'
import { OracleInfo, oracleInfoBeet } from '../types/OracleInfo'

/**
 * Arguments used to create {@link TokenData}
 * @category Accounts
 * @category generated
 */
export type TokenDataArgs = {
  numPools: beet.bignum
  numCollaterals: beet.bignum
  numOracles: beet.bignum
  pools: Pool[] /* size: 64 */
  collaterals: Collateral[] /* size: 16 */
  oracles: OracleInfo[] /* size: 80 */
}

export const tokenDataDiscriminator = [10, 136, 199, 13, 59, 103, 129, 70]
/**
 * Holds the data for the {@link TokenData} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class TokenData implements TokenDataArgs {
  private constructor(
    readonly numPools: beet.bignum,
    readonly numCollaterals: beet.bignum,
    readonly numOracles: beet.bignum,
    readonly pools: Pool[] /* size: 64 */,
    readonly collaterals: Collateral[] /* size: 16 */,
    readonly oracles: OracleInfo[] /* size: 80 */
  ) {}

  /**
   * Creates a {@link TokenData} instance from the provided args.
   */
  static fromArgs(args: TokenDataArgs) {
    return new TokenData(
      args.numPools,
      args.numCollaterals,
      args.numOracles,
      args.pools,
      args.collaterals,
      args.oracles
    )
  }

  /**
   * Deserializes the {@link TokenData} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [TokenData, number] {
    return TokenData.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link TokenData} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<TokenData> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find TokenData account at ${address}`)
    }
    return TokenData.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'F7KEvEhxAQ5AXKRSRHruSF55jcUxVv6S45ohkHvStd5v'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, tokenDataBeet)
  }

  /**
   * Deserializes the {@link TokenData} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [TokenData, number] {
    return tokenDataBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link TokenData} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return tokenDataBeet.serialize({
      accountDiscriminator: tokenDataDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link TokenData}
   */
  static get byteSize() {
    return tokenDataBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link TokenData} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      TokenData.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link TokenData} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === TokenData.byteSize
  }

  /**
   * Returns a readable version of {@link TokenData} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      numPools: (() => {
        const x = <{ toNumber: () => number }>this.numPools
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      numCollaterals: (() => {
        const x = <{ toNumber: () => number }>this.numCollaterals
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      numOracles: (() => {
        const x = <{ toNumber: () => number }>this.numOracles
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      pools: this.pools,
      collaterals: this.collaterals,
      oracles: this.oracles,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const tokenDataBeet = new beet.BeetStruct<
  TokenData,
  TokenDataArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['numPools', beet.u64],
    ['numCollaterals', beet.u64],
    ['numOracles', beet.u64],
    ['pools', beet.uniformFixedSizeArray(poolBeet, 64)],
    ['collaterals', beet.uniformFixedSizeArray(collateralBeet, 16)],
    ['oracles', beet.uniformFixedSizeArray(oracleInfoBeet, 80)],
  ],
  TokenData.fromArgs,
  'TokenData'
)
