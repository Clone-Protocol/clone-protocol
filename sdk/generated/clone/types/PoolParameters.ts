/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import { RawDecimal, rawDecimalBeet } from './RawDecimal'
/**
 * This type is used to derive the {@link PoolParameters} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link PoolParameters} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type PoolParametersRecord = {
  TreasuryTradingFee: { value: RawDecimal }
  LiquidityTradingFee: { value: RawDecimal }
  PythAddress: { address: web3.PublicKey }
  StableCollateralRatio: { value: RawDecimal }
  CryptoCollateralRatio: { value: RawDecimal }
  IlHealthScoreCoefficient: { value: RawDecimal }
  PositionHealthScoreCoefficient: { value: RawDecimal }
  LiquidationDiscountRate: { value: RawDecimal }
  MaxOwnershipPct: { value: RawDecimal }
}

/**
 * Union type respresenting the PoolParameters data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isPoolParameters*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type PoolParameters = beet.DataEnumKeyAsKind<PoolParametersRecord>

export const isPoolParametersTreasuryTradingFee = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'TreasuryTradingFee' } =>
  x.__kind === 'TreasuryTradingFee'
export const isPoolParametersLiquidityTradingFee = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'LiquidityTradingFee' } =>
  x.__kind === 'LiquidityTradingFee'
export const isPoolParametersPythAddress = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'PythAddress' } => x.__kind === 'PythAddress'
export const isPoolParametersStableCollateralRatio = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'StableCollateralRatio' } =>
  x.__kind === 'StableCollateralRatio'
export const isPoolParametersCryptoCollateralRatio = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'CryptoCollateralRatio' } =>
  x.__kind === 'CryptoCollateralRatio'
export const isPoolParametersIlHealthScoreCoefficient = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'IlHealthScoreCoefficient' } =>
  x.__kind === 'IlHealthScoreCoefficient'
export const isPoolParametersPositionHealthScoreCoefficient = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'PositionHealthScoreCoefficient' } =>
  x.__kind === 'PositionHealthScoreCoefficient'
export const isPoolParametersLiquidationDiscountRate = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'LiquidationDiscountRate' } =>
  x.__kind === 'LiquidationDiscountRate'
export const isPoolParametersMaxOwnershipPct = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'MaxOwnershipPct' } =>
  x.__kind === 'MaxOwnershipPct'

/**
 * @category userTypes
 * @category generated
 */
export const poolParametersBeet = beet.dataEnum<PoolParametersRecord>([
  [
    'TreasuryTradingFee',
    new beet.BeetArgsStruct<PoolParametersRecord['TreasuryTradingFee']>(
      [['value', rawDecimalBeet]],
      'PoolParametersRecord["TreasuryTradingFee"]'
    ),
  ],

  [
    'LiquidityTradingFee',
    new beet.BeetArgsStruct<PoolParametersRecord['LiquidityTradingFee']>(
      [['value', rawDecimalBeet]],
      'PoolParametersRecord["LiquidityTradingFee"]'
    ),
  ],

  [
    'PythAddress',
    new beet.BeetArgsStruct<PoolParametersRecord['PythAddress']>(
      [['address', beetSolana.publicKey]],
      'PoolParametersRecord["PythAddress"]'
    ),
  ],

  [
    'StableCollateralRatio',
    new beet.BeetArgsStruct<PoolParametersRecord['StableCollateralRatio']>(
      [['value', rawDecimalBeet]],
      'PoolParametersRecord["StableCollateralRatio"]'
    ),
  ],

  [
    'CryptoCollateralRatio',
    new beet.BeetArgsStruct<PoolParametersRecord['CryptoCollateralRatio']>(
      [['value', rawDecimalBeet]],
      'PoolParametersRecord["CryptoCollateralRatio"]'
    ),
  ],

  [
    'IlHealthScoreCoefficient',
    new beet.BeetArgsStruct<PoolParametersRecord['IlHealthScoreCoefficient']>(
      [['value', rawDecimalBeet]],
      'PoolParametersRecord["IlHealthScoreCoefficient"]'
    ),
  ],

  [
    'PositionHealthScoreCoefficient',
    new beet.BeetArgsStruct<
      PoolParametersRecord['PositionHealthScoreCoefficient']
    >(
      [['value', rawDecimalBeet]],
      'PoolParametersRecord["PositionHealthScoreCoefficient"]'
    ),
  ],

  [
    'LiquidationDiscountRate',
    new beet.BeetArgsStruct<PoolParametersRecord['LiquidationDiscountRate']>(
      [['value', rawDecimalBeet]],
      'PoolParametersRecord["LiquidationDiscountRate"]'
    ),
  ],

  [
    'MaxOwnershipPct',
    new beet.BeetArgsStruct<PoolParametersRecord['MaxOwnershipPct']>(
      [['value', rawDecimalBeet]],
      'PoolParametersRecord["MaxOwnershipPct"]'
    ),
  ],
]) as beet.FixableBeet<PoolParameters, PoolParameters>
