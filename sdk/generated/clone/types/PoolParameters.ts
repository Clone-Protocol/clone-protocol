/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import { Status, statusBeet } from './Status'
/**
 * This type is used to derive the {@link PoolParameters} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link PoolParameters} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type PoolParametersRecord = {
  Status: { value: Status }
  TreasuryTradingFee: { value: number }
  LiquidityTradingFee: { value: number }
  OracleInfoIndex: { value: number }
  MinOvercollateralRatio: { value: number }
  MaxLiquidationOvercollateralRatio: { value: number }
  IlHealthScoreCoefficient: { value: number }
  PositionHealthScoreCoefficient: { value: number }
}

/**
 * Union type respresenting the PoolParameters data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isPoolParameters*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type PoolParameters = beet.DataEnumKeyAsKind<PoolParametersRecord>

export const isPoolParametersStatus = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'Status' } => x.__kind === 'Status'
export const isPoolParametersTreasuryTradingFee = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'TreasuryTradingFee' } =>
  x.__kind === 'TreasuryTradingFee'
export const isPoolParametersLiquidityTradingFee = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'LiquidityTradingFee' } =>
  x.__kind === 'LiquidityTradingFee'
export const isPoolParametersOracleInfoIndex = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'OracleInfoIndex' } =>
  x.__kind === 'OracleInfoIndex'
export const isPoolParametersMinOvercollateralRatio = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'MinOvercollateralRatio' } =>
  x.__kind === 'MinOvercollateralRatio'
export const isPoolParametersMaxLiquidationOvercollateralRatio = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'MaxLiquidationOvercollateralRatio' } =>
  x.__kind === 'MaxLiquidationOvercollateralRatio'
export const isPoolParametersIlHealthScoreCoefficient = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'IlHealthScoreCoefficient' } =>
  x.__kind === 'IlHealthScoreCoefficient'
export const isPoolParametersPositionHealthScoreCoefficient = (
  x: PoolParameters
): x is PoolParameters & { __kind: 'PositionHealthScoreCoefficient' } =>
  x.__kind === 'PositionHealthScoreCoefficient'

/**
 * @category userTypes
 * @category generated
 */
export const poolParametersBeet = beet.dataEnum<PoolParametersRecord>([
  [
    'Status',
    new beet.BeetArgsStruct<PoolParametersRecord['Status']>(
      [['value', statusBeet]],
      'PoolParametersRecord["Status"]'
    ),
  ],

  [
    'TreasuryTradingFee',
    new beet.BeetArgsStruct<PoolParametersRecord['TreasuryTradingFee']>(
      [['value', beet.u16]],
      'PoolParametersRecord["TreasuryTradingFee"]'
    ),
  ],

  [
    'LiquidityTradingFee',
    new beet.BeetArgsStruct<PoolParametersRecord['LiquidityTradingFee']>(
      [['value', beet.u16]],
      'PoolParametersRecord["LiquidityTradingFee"]'
    ),
  ],

  [
    'OracleInfoIndex',
    new beet.BeetArgsStruct<PoolParametersRecord['OracleInfoIndex']>(
      [['value', beet.u8]],
      'PoolParametersRecord["OracleInfoIndex"]'
    ),
  ],

  [
    'MinOvercollateralRatio',
    new beet.BeetArgsStruct<PoolParametersRecord['MinOvercollateralRatio']>(
      [['value', beet.u16]],
      'PoolParametersRecord["MinOvercollateralRatio"]'
    ),
  ],

  [
    'MaxLiquidationOvercollateralRatio',
    new beet.BeetArgsStruct<
      PoolParametersRecord['MaxLiquidationOvercollateralRatio']
    >(
      [['value', beet.u16]],
      'PoolParametersRecord["MaxLiquidationOvercollateralRatio"]'
    ),
  ],

  [
    'IlHealthScoreCoefficient',
    new beet.BeetArgsStruct<PoolParametersRecord['IlHealthScoreCoefficient']>(
      [['value', beet.u16]],
      'PoolParametersRecord["IlHealthScoreCoefficient"]'
    ),
  ],

  [
    'PositionHealthScoreCoefficient',
    new beet.BeetArgsStruct<
      PoolParametersRecord['PositionHealthScoreCoefficient']
    >(
      [['value', beet.u16]],
      'PoolParametersRecord["PositionHealthScoreCoefficient"]'
    ),
  ],
]) as beet.FixableBeet<PoolParameters, PoolParameters>
