/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import { RawDecimal, rawDecimalBeet } from './RawDecimal'
/**
 * This type is used to derive the {@link CollateralParameters} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link CollateralParameters} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type CollateralParametersRecord = {
  Status: { status: beet.bignum }
  OracleInfoIndex: { value: beet.bignum }
  CollateralizationRatio: { value: RawDecimal }
}

/**
 * Union type respresenting the CollateralParameters data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isCollateralParameters*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type CollateralParameters =
  beet.DataEnumKeyAsKind<CollateralParametersRecord>

export const isCollateralParametersStatus = (
  x: CollateralParameters
): x is CollateralParameters & { __kind: 'Status' } => x.__kind === 'Status'
export const isCollateralParametersOracleInfoIndex = (
  x: CollateralParameters
): x is CollateralParameters & { __kind: 'OracleInfoIndex' } =>
  x.__kind === 'OracleInfoIndex'
export const isCollateralParametersCollateralizationRatio = (
  x: CollateralParameters
): x is CollateralParameters & { __kind: 'CollateralizationRatio' } =>
  x.__kind === 'CollateralizationRatio'

/**
 * @category userTypes
 * @category generated
 */
export const collateralParametersBeet =
  beet.dataEnum<CollateralParametersRecord>([
    [
      'Status',
      new beet.BeetArgsStruct<CollateralParametersRecord['Status']>(
        [['status', beet.u64]],
        'CollateralParametersRecord["Status"]'
      ),
    ],

    [
      'OracleInfoIndex',
      new beet.BeetArgsStruct<CollateralParametersRecord['OracleInfoIndex']>(
        [['value', beet.u64]],
        'CollateralParametersRecord["OracleInfoIndex"]'
      ),
    ],

    [
      'CollateralizationRatio',
      new beet.BeetArgsStruct<
        CollateralParametersRecord['CollateralizationRatio']
      >(
        [['value', rawDecimalBeet]],
        'CollateralParametersRecord["CollateralizationRatio"]'
      ),
    ],
  ]) as beet.FixableBeet<CollateralParameters, CollateralParameters>
