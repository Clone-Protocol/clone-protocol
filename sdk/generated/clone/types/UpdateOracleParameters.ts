/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { OracleSource, oracleSourceBeet } from './OracleSource'
import { Status, statusBeet } from './Status'
/**
 * This type is used to derive the {@link UpdateOracleParameters} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link UpdateOracleParameters} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type UpdateOracleParametersRecord = {
  Add: {
    address: web3.PublicKey
    source: OracleSource
    rescaleFactor: beet.COption<number>
  }
  Remove: { index: number }
  Modify: {
    index: number
    address: beet.COption<web3.PublicKey>
    source: beet.COption<OracleSource>
    status: beet.COption<Status>
  }
}

/**
 * Union type respresenting the UpdateOracleParameters data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isUpdateOracleParameters*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type UpdateOracleParameters =
  beet.DataEnumKeyAsKind<UpdateOracleParametersRecord>

export const isUpdateOracleParametersAdd = (
  x: UpdateOracleParameters
): x is UpdateOracleParameters & { __kind: 'Add' } => x.__kind === 'Add'
export const isUpdateOracleParametersRemove = (
  x: UpdateOracleParameters
): x is UpdateOracleParameters & { __kind: 'Remove' } => x.__kind === 'Remove'
export const isUpdateOracleParametersModify = (
  x: UpdateOracleParameters
): x is UpdateOracleParameters & { __kind: 'Modify' } => x.__kind === 'Modify'

/**
 * @category userTypes
 * @category generated
 */
export const updateOracleParametersBeet =
  beet.dataEnum<UpdateOracleParametersRecord>([
    [
      'Add',
      new beet.FixableBeetArgsStruct<UpdateOracleParametersRecord['Add']>(
        [
          ['address', beetSolana.publicKey],
          ['source', oracleSourceBeet],
          ['rescaleFactor', beet.coption(beet.u8)],
        ],
        'UpdateOracleParametersRecord["Add"]'
      ),
    ],

    [
      'Remove',
      new beet.BeetArgsStruct<UpdateOracleParametersRecord['Remove']>(
        [['index', beet.u8]],
        'UpdateOracleParametersRecord["Remove"]'
      ),
    ],

    [
      'Modify',
      new beet.FixableBeetArgsStruct<UpdateOracleParametersRecord['Modify']>(
        [
          ['index', beet.u8],
          ['address', beet.coption(beetSolana.publicKey)],
          ['source', beet.coption(oracleSourceBeet)],
          ['status', beet.coption(statusBeet)],
        ],
        'UpdateOracleParametersRecord["Modify"]'
      ),
    ],
  ]) as beet.FixableBeet<UpdateOracleParameters, UpdateOracleParameters>
