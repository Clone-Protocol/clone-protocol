/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import { RawDecimal, rawDecimalBeet } from './RawDecimal'
/**
 * This type is used to derive the {@link CloneParameters} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link CloneParameters} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type CloneParametersRecord = {
  LiquidationFee: { value: RawDecimal }
  MaxHealthLiquidation: { value: RawDecimal }
  TreasuryAddress: { address: web3.PublicKey }
  IlHealthScoreCutoff: { value: RawDecimal }
  IlLiquidationRewardPct: { value: RawDecimal }
}

/**
 * Union type respresenting the CloneParameters data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isCloneParameters*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type CloneParameters = beet.DataEnumKeyAsKind<CloneParametersRecord>

export const isCloneParametersLiquidationFee = (
  x: CloneParameters
): x is CloneParameters & { __kind: 'LiquidationFee' } =>
  x.__kind === 'LiquidationFee'
export const isCloneParametersMaxHealthLiquidation = (
  x: CloneParameters
): x is CloneParameters & { __kind: 'MaxHealthLiquidation' } =>
  x.__kind === 'MaxHealthLiquidation'
export const isCloneParametersTreasuryAddress = (
  x: CloneParameters
): x is CloneParameters & { __kind: 'TreasuryAddress' } =>
  x.__kind === 'TreasuryAddress'
export const isCloneParametersIlHealthScoreCutoff = (
  x: CloneParameters
): x is CloneParameters & { __kind: 'IlHealthScoreCutoff' } =>
  x.__kind === 'IlHealthScoreCutoff'
export const isCloneParametersIlLiquidationRewardPct = (
  x: CloneParameters
): x is CloneParameters & { __kind: 'IlLiquidationRewardPct' } =>
  x.__kind === 'IlLiquidationRewardPct'

/**
 * @category userTypes
 * @category generated
 */
export const cloneParametersBeet = beet.dataEnum<CloneParametersRecord>([
  [
    'LiquidationFee',
    new beet.BeetArgsStruct<CloneParametersRecord['LiquidationFee']>(
      [['value', rawDecimalBeet]],
      'CloneParametersRecord["LiquidationFee"]'
    ),
  ],

  [
    'MaxHealthLiquidation',
    new beet.BeetArgsStruct<CloneParametersRecord['MaxHealthLiquidation']>(
      [['value', rawDecimalBeet]],
      'CloneParametersRecord["MaxHealthLiquidation"]'
    ),
  ],

  [
    'TreasuryAddress',
    new beet.BeetArgsStruct<CloneParametersRecord['TreasuryAddress']>(
      [['address', beetSolana.publicKey]],
      'CloneParametersRecord["TreasuryAddress"]'
    ),
  ],

  [
    'IlHealthScoreCutoff',
    new beet.BeetArgsStruct<CloneParametersRecord['IlHealthScoreCutoff']>(
      [['value', rawDecimalBeet]],
      'CloneParametersRecord["IlHealthScoreCutoff"]'
    ),
  ],

  [
    'IlLiquidationRewardPct',
    new beet.BeetArgsStruct<CloneParametersRecord['IlLiquidationRewardPct']>(
      [['value', rawDecimalBeet]],
      'CloneParametersRecord["IlLiquidationRewardPct"]'
    ),
  ],
]) as beet.FixableBeet<CloneParameters, CloneParameters>
