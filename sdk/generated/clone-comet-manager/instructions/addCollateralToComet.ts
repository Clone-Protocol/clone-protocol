/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AddCollateralToComet
 * @category generated
 */
export type AddCollateralToCometInstructionArgs = {
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category AddCollateralToComet
 * @category generated
 */
export const addCollateralToCometStruct = new beet.BeetArgsStruct<
  AddCollateralToCometInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['amount', beet.u64],
  ],
  'AddCollateralToCometInstructionArgs'
)
/**
 * Accounts required by the _addCollateralToComet_ instruction
 *
 * @property [**signer**] managerOwner
 * @property [_writable_] managerInfo
 * @property [] clone
 * @property [] managerCloneUser
 * @property [_writable_] onusdMint
 * @property [_writable_] managerOnusdTokenAccount
 * @property [] cloneProgram
 * @property [_writable_] comet
 * @property [_writable_] tokenData
 * @property [_writable_] cloneOnusdVault
 * @category Instructions
 * @category AddCollateralToComet
 * @category generated
 */
export type AddCollateralToCometInstructionAccounts = {
  managerOwner: web3.PublicKey
  managerInfo: web3.PublicKey
  clone: web3.PublicKey
  managerCloneUser: web3.PublicKey
  onusdMint: web3.PublicKey
  managerOnusdTokenAccount: web3.PublicKey
  cloneProgram: web3.PublicKey
  comet: web3.PublicKey
  tokenData: web3.PublicKey
  cloneOnusdVault: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addCollateralToCometInstructionDiscriminator = [
  209, 211, 225, 123, 219, 71, 154, 232,
]

/**
 * Creates a _AddCollateralToComet_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddCollateralToComet
 * @category generated
 */
export function createAddCollateralToCometInstruction(
  accounts: AddCollateralToCometInstructionAccounts,
  args: AddCollateralToCometInstructionArgs,
  programId = new web3.PublicKey('AB3CFBB2cY5godSjfZCJaTvq9qSKzqjzXmJWEwqQ7VJR')
) {
  const [data] = addCollateralToCometStruct.serialize({
    instructionDiscriminator: addCollateralToCometInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.managerOwner,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.managerInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.clone,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.managerCloneUser,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.onusdMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.managerOnusdTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.cloneProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.comet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.cloneOnusdVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
