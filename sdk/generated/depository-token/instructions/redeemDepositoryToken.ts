/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RedeemDepositoryToken
 * @category generated
 */
export type RedeemDepositoryTokenInstructionArgs = {
  redeemAmount: beet.bignum
}
/**
 * @category Instructions
 * @category RedeemDepositoryToken
 * @category generated
 */
export const redeemDepositoryTokenStruct = new beet.BeetArgsStruct<
  RedeemDepositoryTokenInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['redeemAmount', beet.u64],
  ],
  'RedeemDepositoryTokenInstructionArgs'
)
/**
 * Accounts required by the _redeemDepositoryToken_ instruction
 *
 * @property [_writable_, **signer**] user
 * @property [] settings
 * @property [_writable_] depositoryTokenMint
 * @property [_writable_] depositingTokenAccount
 * @property [_writable_] userDepositingTokenAccount
 * @property [_writable_] userDepositoryTokenAccount
 * @category Instructions
 * @category RedeemDepositoryToken
 * @category generated
 */
export type RedeemDepositoryTokenInstructionAccounts = {
  user: web3.PublicKey
  settings: web3.PublicKey
  depositoryTokenMint: web3.PublicKey
  depositingTokenAccount: web3.PublicKey
  userDepositingTokenAccount: web3.PublicKey
  userDepositoryTokenAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const redeemDepositoryTokenInstructionDiscriminator = [
  210, 147, 101, 118, 132, 190, 6, 186,
]

/**
 * Creates a _RedeemDepositoryToken_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RedeemDepositoryToken
 * @category generated
 */
export function createRedeemDepositoryTokenInstruction(
  accounts: RedeemDepositoryTokenInstructionAccounts,
  args: RedeemDepositoryTokenInstructionArgs,
  programId = new web3.PublicKey('DepoUcf8YXb8eqd3cpZxogSFP6DPuEnZmVex9jo2ZKA')
) {
  const [data] = redeemDepositoryTokenStruct.serialize({
    instructionDiscriminator: redeemDepositoryTokenInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.settings,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.depositoryTokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.depositingTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userDepositingTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userDepositoryTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
