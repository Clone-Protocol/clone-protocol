/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link CometManagerStatus} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link CometManagerStatus} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type CometManagerStatusRecord = {
  Open: void /* scalar variant */
  Closing: { forcefullyClosed: boolean; terminationTimestamp: beet.bignum }
}

/**
 * Union type respresenting the CometManagerStatus data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isCometManagerStatus*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type CometManagerStatus =
  beet.DataEnumKeyAsKind<CometManagerStatusRecord>

export const isCometManagerStatusOpen = (
  x: CometManagerStatus
): x is CometManagerStatus & { __kind: 'Open' } => x.__kind === 'Open'
export const isCometManagerStatusClosing = (
  x: CometManagerStatus
): x is CometManagerStatus & { __kind: 'Closing' } => x.__kind === 'Closing'

/**
 * @category userTypes
 * @category generated
 */
export const cometManagerStatusBeet = beet.dataEnum<CometManagerStatusRecord>([
  ['Open', beet.unit],

  [
    'Closing',
    new beet.BeetArgsStruct<CometManagerStatusRecord['Closing']>(
      [
        ['forcefullyClosed', beet.bool],
        ['terminationTimestamp', beet.u64],
      ],
      'CometManagerStatusRecord["Closing"]'
    ),
  ],
]) as beet.FixableBeet<CometManagerStatus, CometManagerStatus>
