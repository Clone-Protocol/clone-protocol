/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * CometMustHaveNoPositions: 'Comet must have no liquidity positions'
 *
 * @category Errors
 * @category generated
 */
export class CometMustHaveNoPositionsError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'CometMustHaveNoPositions'
  constructor() {
    super('Comet must have no liquidity positions')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CometMustHaveNoPositionsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new CometMustHaveNoPositionsError())
createErrorFromNameLookup.set(
  'CometMustHaveNoPositions',
  () => new CometMustHaveNoPositionsError()
)

/**
 * ManagerAtStrikeLimit: 'Manager at/beyond strike limit'
 *
 * @category Errors
 * @category generated
 */
export class ManagerAtStrikeLimitError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'ManagerAtStrikeLimit'
  constructor() {
    super('Manager at/beyond strike limit')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ManagerAtStrikeLimitError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new ManagerAtStrikeLimitError())
createErrorFromNameLookup.set(
  'ManagerAtStrikeLimit',
  () => new ManagerAtStrikeLimitError()
)

/**
 * RequireManagerAtStrikeLimit: 'Require manager to be at/beyond strike limit'
 *
 * @category Errors
 * @category generated
 */
export class RequireManagerAtStrikeLimitError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'RequireManagerAtStrikeLimit'
  constructor() {
    super('Require manager to be at/beyond strike limit')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RequireManagerAtStrikeLimitError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1772,
  () => new RequireManagerAtStrikeLimitError()
)
createErrorFromNameLookup.set(
  'RequireManagerAtStrikeLimit',
  () => new RequireManagerAtStrikeLimitError()
)

/**
 * TooEarlyToClaimReward: 'Too early to claim reward'
 *
 * @category Errors
 * @category generated
 */
export class TooEarlyToClaimRewardError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'TooEarlyToClaimReward'
  constructor() {
    super('Too early to claim reward')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TooEarlyToClaimRewardError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new TooEarlyToClaimRewardError())
createErrorFromNameLookup.set(
  'TooEarlyToClaimReward',
  () => new TooEarlyToClaimRewardError()
)

/**
 * InvalidMembershipTokenBalance: 'Invalid membership token balance'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMembershipTokenBalanceError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidMembershipTokenBalance'
  constructor() {
    super('Invalid membership token balance')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMembershipTokenBalanceError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1774,
  () => new InvalidMembershipTokenBalanceError()
)
createErrorFromNameLookup.set(
  'InvalidMembershipTokenBalance',
  () => new InvalidMembershipTokenBalanceError()
)

/**
 * TooEarlyToPerformTermination: 'Too early to perform final termination'
 *
 * @category Errors
 * @category generated
 */
export class TooEarlyToPerformTerminationError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'TooEarlyToPerformTermination'
  constructor() {
    super('Too early to perform final termination')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TooEarlyToPerformTerminationError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1775,
  () => new TooEarlyToPerformTerminationError()
)
createErrorFromNameLookup.set(
  'TooEarlyToPerformTermination',
  () => new TooEarlyToPerformTerminationError()
)

/**
 * OpenStatusRequired: 'Required that the manager is in open status'
 *
 * @category Errors
 * @category generated
 */
export class OpenStatusRequiredError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'OpenStatusRequired'
  constructor() {
    super('Required that the manager is in open status')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OpenStatusRequiredError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new OpenStatusRequiredError())
createErrorFromNameLookup.set(
  'OpenStatusRequired',
  () => new OpenStatusRequiredError()
)

/**
 * ClosingStatusRequired: 'Required that the manager is in closing status'
 *
 * @category Errors
 * @category generated
 */
export class ClosingStatusRequiredError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'ClosingStatusRequired'
  constructor() {
    super('Required that the manager is in closing status')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ClosingStatusRequiredError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new ClosingStatusRequiredError())
createErrorFromNameLookup.set(
  'ClosingStatusRequired',
  () => new ClosingStatusRequiredError()
)

/**
 * RequestAlreadySent: 'Request already sent'
 *
 * @category Errors
 * @category generated
 */
export class RequestAlreadySentError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'RequestAlreadySent'
  constructor() {
    super('Request already sent')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RequestAlreadySentError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new RequestAlreadySentError())
createErrorFromNameLookup.set(
  'RequestAlreadySent',
  () => new RequestAlreadySentError()
)

/**
 * OutstandingRedemptionsQueueFull: 'Outstanding request queue is full, try again soon'
 *
 * @category Errors
 * @category generated
 */
export class OutstandingRedemptionsQueueFullError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'OutstandingRedemptionsQueueFull'
  constructor() {
    super('Outstanding request queue is full, try again soon')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OutstandingRedemptionsQueueFullError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1779,
  () => new OutstandingRedemptionsQueueFullError()
)
createErrorFromNameLookup.set(
  'OutstandingRedemptionsQueueFull',
  () => new OutstandingRedemptionsQueueFullError()
)

/**
 * InvalidIndex: 'Invalid index'
 *
 * @category Errors
 * @category generated
 */
export class InvalidIndexError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidIndex'
  constructor() {
    super('Invalid index')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidIndexError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidIndexError())
createErrorFromNameLookup.set('InvalidIndex', () => new InvalidIndexError())

/**
 * RequestNotValidForStrike: 'Request not valid for strike'
 *
 * @category Errors
 * @category generated
 */
export class RequestNotValidForStrikeError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'RequestNotValidForStrike'
  constructor() {
    super('Request not valid for strike')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RequestNotValidForStrikeError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new RequestNotValidForStrikeError())
createErrorFromNameLookup.set(
  'RequestNotValidForStrike',
  () => new RequestNotValidForStrikeError()
)

/**
 * InvalidForForcefullyClosedManagers: 'Invalid for forcefully closed manager'
 *
 * @category Errors
 * @category generated
 */
export class InvalidForForcefullyClosedManagersError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'InvalidForForcefullyClosedManagers'
  constructor() {
    super('Invalid for forcefully closed manager')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidForForcefullyClosedManagersError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177c,
  () => new InvalidForForcefullyClosedManagersError()
)
createErrorFromNameLookup.set(
  'InvalidForForcefullyClosedManagers',
  () => new InvalidForForcefullyClosedManagersError()
)

/**
 * MustBeForcefullyClosedManagers: 'Valid for forcefully closed manager'
 *
 * @category Errors
 * @category generated
 */
export class MustBeForcefullyClosedManagersError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'MustBeForcefullyClosedManagers'
  constructor() {
    super('Valid for forcefully closed manager')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MustBeForcefullyClosedManagersError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177d,
  () => new MustBeForcefullyClosedManagersError()
)
createErrorFromNameLookup.set(
  'MustBeForcefullyClosedManagers',
  () => new MustBeForcefullyClosedManagersError()
)

/**
 * DepositAmountTooLow: 'Deposit amount too low'
 *
 * @category Errors
 * @category generated
 */
export class DepositAmountTooLowError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'DepositAmountTooLow'
  constructor() {
    super('Deposit amount too low')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DepositAmountTooLowError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new DepositAmountTooLowError())
createErrorFromNameLookup.set(
  'DepositAmountTooLow',
  () => new DepositAmountTooLowError()
)

/**
 * WithdrawalAmountInvalid: 'Invalid withdrawal amount!'
 *
 * @category Errors
 * @category generated
 */
export class WithdrawalAmountInvalidError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'WithdrawalAmountInvalid'
  constructor() {
    super('Invalid withdrawal amount!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WithdrawalAmountInvalidError)
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new WithdrawalAmountInvalidError())
createErrorFromNameLookup.set(
  'WithdrawalAmountInvalid',
  () => new WithdrawalAmountInvalidError()
)

/**
 * RedemptionsMustBeFulfilled: 'All redemptions must be fulfilled!'
 *
 * @category Errors
 * @category generated
 */
export class RedemptionsMustBeFulfilledError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'RedemptionsMustBeFulfilled'
  constructor() {
    super('All redemptions must be fulfilled!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RedemptionsMustBeFulfilledError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1780,
  () => new RedemptionsMustBeFulfilledError()
)
createErrorFromNameLookup.set(
  'RedemptionsMustBeFulfilled',
  () => new RedemptionsMustBeFulfilledError()
)

/**
 * OutdatedUpdateSlot: 'Outdated update slot'
 *
 * @category Errors
 * @category generated
 */
export class OutdatedUpdateSlotError extends Error {
  readonly code: number = 0x1781
  readonly name: string = 'OutdatedUpdateSlot'
  constructor() {
    super('Outdated update slot')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OutdatedUpdateSlotError)
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new OutdatedUpdateSlotError())
createErrorFromNameLookup.set(
  'OutdatedUpdateSlot',
  () => new OutdatedUpdateSlotError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
