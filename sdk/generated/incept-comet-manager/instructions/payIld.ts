/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category PayIld
 * @category generated
 */
export type PayIldInstructionArgs = {
  cometPositionIndex: number
  collateralAmount: beet.bignum
  payUsdiDebt: boolean
}
/**
 * @category Instructions
 * @category PayIld
 * @category generated
 */
export const payIldStruct = new beet.BeetArgsStruct<
  PayIldInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['cometPositionIndex', beet.u8],
    ['collateralAmount', beet.u64],
    ['payUsdiDebt', beet.bool],
  ],
  'PayIldInstructionArgs'
)
/**
 * Accounts required by the _payIld_ instruction
 *
 * @property [**signer**] signer
 * @property [] managerInfo
 * @property [_writable_] incept
 * @property [_writable_] managerInceptUser
 * @property [_writable_] usdiMint
 * @property [] inceptProgram
 * @property [_writable_] comet
 * @property [_writable_] tokenData
 * @property [_writable_] iassetMint
 * @property [_writable_] ammUsdiTokenAccount
 * @property [_writable_] ammIassetTokenAccount
 * @property [_writable_] managerIassetTokenAccount
 * @property [_writable_] managerUsdiTokenAccount
 * @property [_writable_] inceptUsdiVault
 * @category Instructions
 * @category PayIld
 * @category generated
 */
export type PayIldInstructionAccounts = {
  signer: web3.PublicKey
  managerInfo: web3.PublicKey
  incept: web3.PublicKey
  managerInceptUser: web3.PublicKey
  usdiMint: web3.PublicKey
  inceptProgram: web3.PublicKey
  comet: web3.PublicKey
  tokenData: web3.PublicKey
  iassetMint: web3.PublicKey
  ammUsdiTokenAccount: web3.PublicKey
  ammIassetTokenAccount: web3.PublicKey
  managerIassetTokenAccount: web3.PublicKey
  managerUsdiTokenAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  inceptUsdiVault: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const payIldInstructionDiscriminator = [
  45, 138, 207, 128, 127, 200, 87, 55,
]

/**
 * Creates a _PayIld_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PayIld
 * @category generated
 */
export function createPayIldInstruction(
  accounts: PayIldInstructionAccounts,
  args: PayIldInstructionArgs,
  programId = new web3.PublicKey('CNEvgsmVcYBwUzWQj6iss9MJaFDAzpF8BHSEjejLTXDh')
) {
  const [data] = payIldStruct.serialize({
    instructionDiscriminator: payIldInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.managerInfo,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.incept,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.managerInceptUser,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.usdiMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.inceptProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.comet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.iassetMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.ammUsdiTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.ammIassetTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.managerIassetTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.managerUsdiTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.inceptUsdiVault,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
