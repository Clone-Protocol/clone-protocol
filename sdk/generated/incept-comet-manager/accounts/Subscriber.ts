/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import {
  RedemptionRequest,
  redemptionRequestBeet,
} from '../types/RedemptionRequest'

/**
 * Arguments used to create {@link Subscriber}
 * @category Accounts
 * @category generated
 */
export type SubscriberArgs = {
  owner: web3.PublicKey
  manager: web3.PublicKey
  principal: beet.bignum
  membershipTokens: beet.bignum
  redemptionRequest: beet.COption<RedemptionRequest>
}

export const subscriberDiscriminator = [44, 244, 131, 14, 146, 208, 93, 64]
/**
 * Holds the data for the {@link Subscriber} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Subscriber implements SubscriberArgs {
  private constructor(
    readonly owner: web3.PublicKey,
    readonly manager: web3.PublicKey,
    readonly principal: beet.bignum,
    readonly membershipTokens: beet.bignum,
    readonly redemptionRequest: beet.COption<RedemptionRequest>
  ) {}

  /**
   * Creates a {@link Subscriber} instance from the provided args.
   */
  static fromArgs(args: SubscriberArgs) {
    return new Subscriber(
      args.owner,
      args.manager,
      args.principal,
      args.membershipTokens,
      args.redemptionRequest
    )
  }

  /**
   * Deserializes the {@link Subscriber} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Subscriber, number] {
    return Subscriber.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Subscriber} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Subscriber> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Subscriber account at ${address}`)
    }
    return Subscriber.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'CNEvgsmVcYBwUzWQj6iss9MJaFDAzpF8BHSEjejLTXDh'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, subscriberBeet)
  }

  /**
   * Deserializes the {@link Subscriber} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Subscriber, number] {
    return subscriberBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Subscriber} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return subscriberBeet.serialize({
      accountDiscriminator: subscriberDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Subscriber} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: SubscriberArgs) {
    const instance = Subscriber.fromArgs(args)
    return subscriberBeet.toFixedFromValue({
      accountDiscriminator: subscriberDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Subscriber} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: SubscriberArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Subscriber.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Subscriber} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      owner: this.owner.toBase58(),
      manager: this.manager.toBase58(),
      principal: (() => {
        const x = <{ toNumber: () => number }>this.principal
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      membershipTokens: (() => {
        const x = <{ toNumber: () => number }>this.membershipTokens
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      redemptionRequest: this.redemptionRequest,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const subscriberBeet = new beet.FixableBeetStruct<
  Subscriber,
  SubscriberArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['owner', beetSolana.publicKey],
    ['manager', beetSolana.publicKey],
    ['principal', beet.u64],
    ['membershipTokens', beet.u64],
    ['redemptionRequest', beet.coption(redemptionRequestBeet)],
  ],
  Subscriber.fromArgs,
  'Subscriber'
)
