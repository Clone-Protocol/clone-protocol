/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import {
  CometManagerStatus,
  cometManagerStatusBeet,
} from '../types/CometManagerStatus'

/**
 * Arguments used to create {@link ManagerInfo}
 * @category Accounts
 * @category generated
 */
export type ManagerInfoArgs = {
  inceptProgram: web3.PublicKey
  incept: web3.PublicKey
  owner: web3.PublicKey
  membershipTokenSupply: beet.bignum
  userAccount: web3.PublicKey
  userBump: number
  bump: number
  status: CometManagerStatus
  withdrawalFeeBps: number
  managementFeeBps: number
  feeClaimTimestamp: beet.bignum
  redemptionStrikes: number
  lastStrikeTimestamp: beet.bignum
  netValueUsdi: beet.bignum
  lastUpdateSlot: beet.bignum
  userRedemptions: web3.PublicKey[]
}

export const managerInfoDiscriminator = [58, 116, 185, 111, 105, 70, 73, 233]
/**
 * Holds the data for the {@link ManagerInfo} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ManagerInfo implements ManagerInfoArgs {
  private constructor(
    readonly inceptProgram: web3.PublicKey,
    readonly incept: web3.PublicKey,
    readonly owner: web3.PublicKey,
    readonly membershipTokenSupply: beet.bignum,
    readonly userAccount: web3.PublicKey,
    readonly userBump: number,
    readonly bump: number,
    readonly status: CometManagerStatus,
    readonly withdrawalFeeBps: number,
    readonly managementFeeBps: number,
    readonly feeClaimTimestamp: beet.bignum,
    readonly redemptionStrikes: number,
    readonly lastStrikeTimestamp: beet.bignum,
    readonly netValueUsdi: beet.bignum,
    readonly lastUpdateSlot: beet.bignum,
    readonly userRedemptions: web3.PublicKey[]
  ) {}

  /**
   * Creates a {@link ManagerInfo} instance from the provided args.
   */
  static fromArgs(args: ManagerInfoArgs) {
    return new ManagerInfo(
      args.inceptProgram,
      args.incept,
      args.owner,
      args.membershipTokenSupply,
      args.userAccount,
      args.userBump,
      args.bump,
      args.status,
      args.withdrawalFeeBps,
      args.managementFeeBps,
      args.feeClaimTimestamp,
      args.redemptionStrikes,
      args.lastStrikeTimestamp,
      args.netValueUsdi,
      args.lastUpdateSlot,
      args.userRedemptions
    )
  }

  /**
   * Deserializes the {@link ManagerInfo} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [ManagerInfo, number] {
    return ManagerInfo.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link ManagerInfo} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<ManagerInfo> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find ManagerInfo account at ${address}`)
    }
    return ManagerInfo.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '6HAQXsz7ScT5SueXukgDB8ExE9FKeqj5q1z925SujZsu'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, managerInfoBeet)
  }

  /**
   * Deserializes the {@link ManagerInfo} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [ManagerInfo, number] {
    return managerInfoBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link ManagerInfo} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return managerInfoBeet.serialize({
      accountDiscriminator: managerInfoDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link ManagerInfo} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ManagerInfoArgs) {
    const instance = ManagerInfo.fromArgs(args)
    return managerInfoBeet.toFixedFromValue({
      accountDiscriminator: managerInfoDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link ManagerInfo} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ManagerInfoArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      ManagerInfo.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link ManagerInfo} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      inceptProgram: this.inceptProgram.toBase58(),
      incept: this.incept.toBase58(),
      owner: this.owner.toBase58(),
      membershipTokenSupply: (() => {
        const x = <{ toNumber: () => number }>this.membershipTokenSupply
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      userAccount: this.userAccount.toBase58(),
      userBump: this.userBump,
      bump: this.bump,
      status: this.status.__kind,
      withdrawalFeeBps: this.withdrawalFeeBps,
      managementFeeBps: this.managementFeeBps,
      feeClaimTimestamp: (() => {
        const x = <{ toNumber: () => number }>this.feeClaimTimestamp
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      redemptionStrikes: this.redemptionStrikes,
      lastStrikeTimestamp: (() => {
        const x = <{ toNumber: () => number }>this.lastStrikeTimestamp
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      netValueUsdi: (() => {
        const x = <{ toNumber: () => number }>this.netValueUsdi
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      lastUpdateSlot: (() => {
        const x = <{ toNumber: () => number }>this.lastUpdateSlot
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      userRedemptions: this.userRedemptions,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const managerInfoBeet = new beet.FixableBeetStruct<
  ManagerInfo,
  ManagerInfoArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['inceptProgram', beetSolana.publicKey],
    ['incept', beetSolana.publicKey],
    ['owner', beetSolana.publicKey],
    ['membershipTokenSupply', beet.u64],
    ['userAccount', beetSolana.publicKey],
    ['userBump', beet.u8],
    ['bump', beet.u8],
    ['status', cometManagerStatusBeet],
    ['withdrawalFeeBps', beet.u16],
    ['managementFeeBps', beet.u16],
    ['feeClaimTimestamp', beet.u64],
    ['redemptionStrikes', beet.u8],
    ['lastStrikeTimestamp', beet.u64],
    ['netValueUsdi', beet.u64],
    ['lastUpdateSlot', beet.u64],
    ['userRedemptions', beet.array(beetSolana.publicKey)],
  ],
  ManagerInfo.fromArgs,
  'ManagerInfo'
)
