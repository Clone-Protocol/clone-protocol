/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category WithdrawCollateralFromSinglePoolComet
 * @category generated
 */
export type WithdrawCollateralFromSinglePoolCometInstructionArgs = {
  positionIndex: number
  collateralAmount: beet.bignum
}
/**
 * @category Instructions
 * @category WithdrawCollateralFromSinglePoolComet
 * @category generated
 */
export const withdrawCollateralFromSinglePoolCometStruct =
  new beet.BeetArgsStruct<
    WithdrawCollateralFromSinglePoolCometInstructionArgs & {
      instructionDiscriminator: number[] /* size: 8 */
    }
  >(
    [
      ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
      ['positionIndex', beet.u8],
      ['collateralAmount', beet.u64],
    ],
    'WithdrawCollateralFromSinglePoolCometInstructionArgs'
  )
/**
 * Accounts required by the _withdrawCollateralFromSinglePoolComet_ instruction
 *
 * @property [**signer**] user
 * @property [] userAccount
 * @property [] incept
 * @property [_writable_] tokenData
 * @property [_writable_] comet
 * @property [_writable_] vault
 * @property [_writable_] userCollateralTokenAccount
 * @category Instructions
 * @category WithdrawCollateralFromSinglePoolComet
 * @category generated
 */
export type WithdrawCollateralFromSinglePoolCometInstructionAccounts = {
  user: web3.PublicKey
  userAccount: web3.PublicKey
  incept: web3.PublicKey
  tokenData: web3.PublicKey
  comet: web3.PublicKey
  vault: web3.PublicKey
  userCollateralTokenAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const withdrawCollateralFromSinglePoolCometInstructionDiscriminator = [
  92, 58, 188, 225, 166, 217, 105, 127,
]

/**
 * Creates a _WithdrawCollateralFromSinglePoolComet_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category WithdrawCollateralFromSinglePoolComet
 * @category generated
 */
export function createWithdrawCollateralFromSinglePoolCometInstruction(
  accounts: WithdrawCollateralFromSinglePoolCometInstructionAccounts,
  args: WithdrawCollateralFromSinglePoolCometInstructionArgs,
  programId = new web3.PublicKey('7nDVRAFPTYDfcSZv9F7JxfbFxNDABfB1edG7gKHavwpt')
) {
  const [data] = withdrawCollateralFromSinglePoolCometStruct.serialize({
    instructionDiscriminator:
      withdrawCollateralFromSinglePoolCometInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.user,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.userAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.incept,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.comet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userCollateralTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
