/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link Parameters} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link Parameters} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ParametersRecord = {
  Staking: { stakingPeriodSlots: beet.bignum }
  Tier: {
    numTiers: number
    index: number
    stakeRequirement: beet.bignum
    lpTradingFeeBps: number
    treasuryTradingFeeBps: number
  }
}

/**
 * Union type respresenting the Parameters data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isParameters*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type Parameters = beet.DataEnumKeyAsKind<ParametersRecord>

export const isParametersStaking = (
  x: Parameters
): x is Parameters & { __kind: 'Staking' } => x.__kind === 'Staking'
export const isParametersTier = (
  x: Parameters
): x is Parameters & { __kind: 'Tier' } => x.__kind === 'Tier'

/**
 * @category userTypes
 * @category generated
 */
export const parametersBeet = beet.dataEnum<ParametersRecord>([
  [
    'Staking',
    new beet.BeetArgsStruct<ParametersRecord['Staking']>(
      [['stakingPeriodSlots', beet.u64]],
      'ParametersRecord["Staking"]'
    ),
  ],

  [
    'Tier',
    new beet.BeetArgsStruct<ParametersRecord['Tier']>(
      [
        ['numTiers', beet.u8],
        ['index', beet.u8],
        ['stakeRequirement', beet.u64],
        ['lpTradingFeeBps', beet.u16],
        ['treasuryTradingFeeBps', beet.u16],
      ],
      'ParametersRecord["Tier"]'
    ),
  ],
]) as beet.FixableBeet<Parameters, Parameters>
