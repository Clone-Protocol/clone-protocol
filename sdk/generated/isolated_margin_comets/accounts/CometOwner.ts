/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link CometOwner}
 * @category Accounts
 * @category generated
 */
export type CometOwnerArgs = {}

export const cometOwnerDiscriminator = [127, 202, 72, 79, 215, 40, 140, 44]
/**
 * Holds the data for the {@link CometOwner} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class CometOwner implements CometOwnerArgs {
  private constructor() {}

  /**
   * Creates a {@link CometOwner} instance from the provided args.
   */
  static fromArgs(args: CometOwnerArgs) {
    return new CometOwner()
  }

  /**
   * Deserializes the {@link CometOwner} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [CometOwner, number] {
    return CometOwner.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link CometOwner} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<CometOwner> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find CometOwner account at ${address}`)
    }
    return CometOwner.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'HeXLPMQr13eLB6k6rvX2phBg3ETpvzqMBnZxSZy9tvn3'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, cometOwnerBeet)
  }

  /**
   * Deserializes the {@link CometOwner} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [CometOwner, number] {
    return cometOwnerBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link CometOwner} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return cometOwnerBeet.serialize({
      accountDiscriminator: cometOwnerDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link CometOwner}
   */
  static get byteSize() {
    return cometOwnerBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link CometOwner} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      CometOwner.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link CometOwner} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === CometOwner.byteSize
  }

  /**
   * Returns a readable version of {@link CometOwner} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {}
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const cometOwnerBeet = new beet.BeetStruct<
  CometOwner,
  { accountDiscriminator: number[] /* size: 8 */ }
>(
  [['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  CometOwner.fromArgs,
  'CometOwner'
)
