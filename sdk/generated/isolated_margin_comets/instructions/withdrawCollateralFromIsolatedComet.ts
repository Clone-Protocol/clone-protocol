/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category WithdrawCollateralFromIsolatedComet
 * @category generated
 */
export type WithdrawCollateralFromIsolatedCometInstructionArgs = {
  positionIndex: number
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category WithdrawCollateralFromIsolatedComet
 * @category generated
 */
export const withdrawCollateralFromIsolatedCometStruct =
  new beet.BeetArgsStruct<
    WithdrawCollateralFromIsolatedCometInstructionArgs & {
      instructionDiscriminator: number[] /* size: 8 */
    }
  >(
    [
      ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
      ['positionIndex', beet.u8],
      ['amount', beet.u64],
    ],
    'WithdrawCollateralFromIsolatedCometInstructionArgs'
  )
/**
 * Accounts required by the _withdrawCollateralFromIsolatedComet_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [] managerAccount
 * @property [] ownerAccount
 * @property [_writable_] userAccount
 * @property [] cloneProgram
 * @property [_writable_] cloneAccount
 * @property [_writable_] ownerCollateralTokenAccount
 * @property [_writable_] vault
 * @property [_writable_] signerCollateralTokenAccount
 * @property [_writable_] pools
 * @property [_writable_] oracles
 * @category Instructions
 * @category WithdrawCollateralFromIsolatedComet
 * @category generated
 */
export type WithdrawCollateralFromIsolatedCometInstructionAccounts = {
  signer: web3.PublicKey
  managerAccount: web3.PublicKey
  ownerAccount: web3.PublicKey
  userAccount: web3.PublicKey
  cloneProgram: web3.PublicKey
  cloneAccount: web3.PublicKey
  ownerCollateralTokenAccount: web3.PublicKey
  vault: web3.PublicKey
  signerCollateralTokenAccount: web3.PublicKey
  pools: web3.PublicKey
  oracles: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const withdrawCollateralFromIsolatedCometInstructionDiscriminator = [
  18, 57, 221, 152, 77, 219, 21, 19,
]

/**
 * Creates a _WithdrawCollateralFromIsolatedComet_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category WithdrawCollateralFromIsolatedComet
 * @category generated
 */
export function createWithdrawCollateralFromIsolatedCometInstruction(
  accounts: WithdrawCollateralFromIsolatedCometInstructionAccounts,
  args: WithdrawCollateralFromIsolatedCometInstructionArgs,
  programId = new web3.PublicKey('HeXLPMQr13eLB6k6rvX2phBg3ETpvzqMBnZxSZy9tvn3')
) {
  const [data] = withdrawCollateralFromIsolatedCometStruct.serialize({
    instructionDiscriminator:
      withdrawCollateralFromIsolatedCometInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.managerAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.ownerAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.userAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.cloneProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.cloneAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.ownerCollateralTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.signerCollateralTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.pools,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.oracles,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
