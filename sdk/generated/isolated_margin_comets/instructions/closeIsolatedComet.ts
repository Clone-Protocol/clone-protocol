/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CloseIsolatedComet
 * @category generated
 */
export type CloseIsolatedCometInstructionArgs = {
  positionIndex: number
}
/**
 * @category Instructions
 * @category CloseIsolatedComet
 * @category generated
 */
export const closeIsolatedCometStruct = new beet.BeetArgsStruct<
  CloseIsolatedCometInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['positionIndex', beet.u8],
  ],
  'CloseIsolatedCometInstructionArgs'
)
/**
 * Accounts required by the _closeIsolatedComet_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [_writable_] managerAccount
 * @property [_writable_] ownerAccount
 * @property [_writable_] userAccount
 * @property [] cloneProgram
 * @category Instructions
 * @category CloseIsolatedComet
 * @category generated
 */
export type CloseIsolatedCometInstructionAccounts = {
  signer: web3.PublicKey
  managerAccount: web3.PublicKey
  ownerAccount: web3.PublicKey
  userAccount: web3.PublicKey
  cloneProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const closeIsolatedCometInstructionDiscriminator = [
  127, 113, 219, 88, 204, 172, 34, 135,
]

/**
 * Creates a _CloseIsolatedComet_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CloseIsolatedComet
 * @category generated
 */
export function createCloseIsolatedCometInstruction(
  accounts: CloseIsolatedCometInstructionAccounts,
  args: CloseIsolatedCometInstructionArgs,
  programId = new web3.PublicKey('HeXLPMQr13eLB6k6rvX2phBg3ETpvzqMBnZxSZy9tvn3')
) {
  const [data] = closeIsolatedCometStruct.serialize({
    instructionDiscriminator: closeIsolatedCometInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.managerAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.ownerAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.cloneProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
